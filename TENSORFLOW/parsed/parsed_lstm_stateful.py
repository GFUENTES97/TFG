Module(body=[
  Expr(value=Str(s='\n#How to use a stateful LSTM model, stateful vs stateless LSTM performance comparison\n\n[More documentation about the Keras LSTM model](/layers/recurrent/#lstm)\n\nThe models are trained on an input/output pair, where\nthe input is a generated uniformly distributed\nrandom sequence of length = `input_len`,\nand the output is a moving average of the input with window length = `tsteps`.\nBoth `input_len` and `tsteps` are defined in the "editable parameters"\nsection.\n\nA larger `tsteps` value means that the LSTM will need more memory\nto figure out the input-output relationship.\nThis memory length is controlled by the `lahead` variable (more details below).\n\nThe rest of the parameters are:\n\n- `input_len`: the length of the generated input sequence\n- `lahead`: the input sequence length that the LSTM\n  is trained on for each output point\n- `batch_size`, `epochs`: same parameters as in the `model.fit(...)`\n  function\n\nWhen `lahead > 1`, the model input is preprocessed to a "rolling window view"\nof the data, with the window length = `lahead`.\nThis is similar to sklearn\'s `view_as_windows`\nwith `window_shape` [being a single number.](\nhttp://scikit-image.org/docs/0.10.x/api/skimage.util.html#view-as-windows)\n\nWhen `lahead < tsteps`, only the stateful LSTM converges because its\nstatefulness allows it to see beyond the capability that lahead\ngave it to fit the n-point average. The stateless LSTM does not have\nthis capability, and hence is limited by its `lahead` parameter,\nwhich is not sufficient to see the n-point average.\n\nWhen `lahead >= tsteps`, both the stateful and stateless LSTM converge.\n')),
  ImportFrom(
    module='__future__',
    names=[alias(
      name='print_function',
      asname=None)],
    level=0),
  Import(names=[alias(
    name='numpy',
    asname='np')]),
  Import(names=[alias(
    name='matplotlib.pyplot',
    asname='plt')]),
  Import(names=[alias(
    name='pandas',
    asname='pd')]),
  ImportFrom(
    module='keras.models',
    names=[alias(
      name='Sequential',
      asname=None)],
    level=0),
  ImportFrom(
    module='keras.layers',
    names=[
      alias(
        name='Dense',
        asname=None),
      alias(
        name='LSTM',
        asname=None)],
    level=0),
  Assign(
    targets=[Name(
      id='input_len',
      ctx=Store())],
    value=Num(n=1000)),
  Assign(
    targets=[Name(
      id='tsteps',
      ctx=Store())],
    value=Num(n=2)),
  Assign(
    targets=[Name(
      id='lahead',
      ctx=Store())],
    value=Num(n=1)),
  Assign(
    targets=[Name(
      id='batch_size',
      ctx=Store())],
    value=Num(n=1)),
  Assign(
    targets=[Name(
      id='epochs',
      ctx=Store())],
    value=Num(n=10)),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[BinOp(
      left=Str(s='*'),
      op=Mult(),
      right=Num(n=33))],
    keywords=[])),
  If(
    test=Compare(
      left=Name(
        id='lahead',
        ctx=Load()),
      ops=[GtE()],
      comparators=[Name(
        id='tsteps',
        ctx=Load())]),
    body=[Expr(value=Call(
      func=Name(
        id='print',
        ctx=Load()),
      args=[Str(s='STATELESS LSTM WILL ALSO CONVERGE')],
      keywords=[]))],
    orelse=[Expr(value=Call(
      func=Name(
        id='print',
        ctx=Load()),
      args=[Str(s='STATELESS LSTM WILL NOT CONVERGE')],
      keywords=[]))]),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[BinOp(
      left=Str(s='*'),
      op=Mult(),
      right=Num(n=33))],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Attribute(
        value=Name(
          id='np',
          ctx=Load()),
        attr='random',
        ctx=Load()),
      attr='seed',
      ctx=Load()),
    args=[Num(n=1986)],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Generating Data...')],
    keywords=[])),
  FunctionDef(
    name='gen_uniform_amp',
    args=arguments(
      args=[
        arg(
          arg='amp',
          annotation=None),
        arg(
          arg='xn',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[
        Num(n=1),
        Num(n=10000)]),
    body=[
      Expr(value=Str(s='Generates uniform random data between\n    -amp and +amp\n    and of length xn\n\n    # Arguments\n        amp: maximum/minimum range of uniform data\n        xn: length of series\n    ')),
      Assign(
        targets=[Name(
          id='data_input',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Attribute(
              value=Name(
                id='np',
                ctx=Load()),
              attr='random',
              ctx=Load()),
            attr='uniform',
            ctx=Load()),
          args=[
            BinOp(
              left=UnaryOp(
                op=USub(),
                operand=Num(n=1)),
              op=Mult(),
              right=Name(
                id='amp',
                ctx=Load())),
            BinOp(
              left=UnaryOp(
                op=UAdd(),
                operand=Num(n=1)),
              op=Mult(),
              right=Name(
                id='amp',
                ctx=Load())),
            Name(
              id='xn',
              ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='data_input',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='pd',
              ctx=Load()),
            attr='DataFrame',
            ctx=Load()),
          args=[Name(
            id='data_input',
            ctx=Load())],
          keywords=[])),
      Return(value=Name(
        id='data_input',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  Assign(
    targets=[Name(
      id='to_drop',
      ctx=Store())],
    value=Call(
      func=Name(
        id='max',
        ctx=Load()),
      args=[
        BinOp(
          left=Name(
            id='tsteps',
            ctx=Load()),
          op=Sub(),
          right=Num(n=1)),
        BinOp(
          left=Name(
            id='lahead',
            ctx=Load()),
          op=Sub(),
          right=Num(n=1))],
      keywords=[])),
  Assign(
    targets=[Name(
      id='data_input',
      ctx=Store())],
    value=Call(
      func=Name(
        id='gen_uniform_amp',
        ctx=Load()),
      args=[],
      keywords=[
        keyword(
          arg='amp',
          value=Num(n=0.1)),
        keyword(
          arg='xn',
          value=BinOp(
            left=Name(
              id='input_len',
              ctx=Load()),
            op=Add(),
            right=Name(
              id='to_drop',
              ctx=Load())))])),
  Assign(
    targets=[Name(
      id='expected_output',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Call(
          func=Attribute(
            value=Name(
              id='data_input',
              ctx=Load()),
            attr='rolling',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='window',
              value=Name(
                id='tsteps',
                ctx=Load())),
            keyword(
              arg='center',
              value=NameConstant(value=False))]),
        attr='mean',
        ctx=Load()),
      args=[],
      keywords=[])),
  If(
    test=Compare(
      left=Name(
        id='lahead',
        ctx=Load()),
      ops=[Gt()],
      comparators=[Num(n=1)]),
    body=[
      Assign(
        targets=[Name(
          id='data_input',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='np',
              ctx=Load()),
            attr='repeat',
            ctx=Load()),
          args=[Attribute(
            value=Name(
              id='data_input',
              ctx=Load()),
            attr='values',
            ctx=Load())],
          keywords=[
            keyword(
              arg='repeats',
              value=Name(
                id='lahead',
                ctx=Load())),
            keyword(
              arg='axis',
              value=Num(n=1))])),
      Assign(
        targets=[Name(
          id='data_input',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='pd',
              ctx=Load()),
            attr='DataFrame',
            ctx=Load()),
          args=[Name(
            id='data_input',
            ctx=Load())],
          keywords=[])),
      For(
        target=Tuple(
          elts=[
            Name(
              id='i',
              ctx=Store()),
            Name(
              id='c',
              ctx=Store())],
          ctx=Store()),
        iter=Call(
          func=Name(
            id='enumerate',
            ctx=Load()),
          args=[Attribute(
            value=Name(
              id='data_input',
              ctx=Load()),
            attr='columns',
            ctx=Load())],
          keywords=[]),
        body=[Assign(
          targets=[Subscript(
            value=Name(
              id='data_input',
              ctx=Load()),
            slice=Index(value=Name(
              id='c',
              ctx=Load())),
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Subscript(
                value=Name(
                  id='data_input',
                  ctx=Load()),
                slice=Index(value=Name(
                  id='c',
                  ctx=Load())),
                ctx=Load()),
              attr='shift',
              ctx=Load()),
            args=[Name(
              id='i',
              ctx=Load())],
            keywords=[]))],
        orelse=[])],
    orelse=[]),
  Assign(
    targets=[Name(
      id='expected_output',
      ctx=Store())],
    value=Subscript(
      value=Name(
        id='expected_output',
        ctx=Load()),
      slice=Slice(
        lower=Name(
          id='to_drop',
          ctx=Load()),
        upper=None,
        step=None),
      ctx=Load())),
  Assign(
    targets=[Name(
      id='data_input',
      ctx=Store())],
    value=Subscript(
      value=Name(
        id='data_input',
        ctx=Load()),
      slice=Slice(
        lower=Name(
          id='to_drop',
          ctx=Load()),
        upper=None,
        step=None),
      ctx=Load())),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Input shape:'),
      Attribute(
        value=Name(
          id='data_input',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Output shape:'),
      Attribute(
        value=Name(
          id='expected_output',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Input head: ')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='data_input',
          ctx=Load()),
        attr='head',
        ctx=Load()),
      args=[],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Output head: ')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='expected_output',
          ctx=Load()),
        attr='head',
        ctx=Load()),
      args=[],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Input tail: ')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='data_input',
          ctx=Load()),
        attr='tail',
        ctx=Load()),
      args=[],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Output tail: ')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='expected_output',
          ctx=Load()),
        attr='tail',
        ctx=Load()),
      args=[],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Plotting input and expected output')],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='plot',
      ctx=Load()),
    args=[
      Subscript(
        value=Subscript(
          value=Name(
            id='data_input',
            ctx=Load()),
          slice=Index(value=Num(n=0)),
          ctx=Load()),
        slice=Slice(
          lower=None,
          upper=Num(n=10),
          step=None),
        ctx=Load()),
      Str(s='.')],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='plot',
      ctx=Load()),
    args=[
      Subscript(
        value=Subscript(
          value=Name(
            id='expected_output',
            ctx=Load()),
          slice=Index(value=Num(n=0)),
          ctx=Load()),
        slice=Slice(
          lower=None,
          upper=Num(n=10),
          step=None),
        ctx=Load()),
      Str(s='-')],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='legend',
      ctx=Load()),
    args=[List(
      elts=[
        Str(s='Input'),
        Str(s='Expected output')],
      ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='title',
      ctx=Load()),
    args=[Str(s='Input')],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='show',
      ctx=Load()),
    args=[],
    keywords=[])),
  FunctionDef(
    name='create_model',
    args=arguments(
      args=[arg(
        arg='stateful',
        annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      Assign(
        targets=[Name(
          id='model',
          ctx=Store())],
        value=Call(
          func=Name(
            id='Sequential',
            ctx=Load()),
          args=[],
          keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='model',
            ctx=Load()),
          attr='add',
          ctx=Load()),
        args=[Call(
          func=Name(
            id='LSTM',
            ctx=Load()),
          args=[Num(n=20)],
          keywords=[
            keyword(
              arg='input_shape',
              value=Tuple(
                elts=[
                  Name(
                    id='lahead',
                    ctx=Load()),
                  Num(n=1)],
                ctx=Load())),
            keyword(
              arg='batch_size',
              value=Name(
                id='batch_size',
                ctx=Load())),
            keyword(
              arg='stateful',
              value=Name(
                id='stateful',
                ctx=Load()))])],
        keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='model',
            ctx=Load()),
          attr='add',
          ctx=Load()),
        args=[Call(
          func=Name(
            id='Dense',
            ctx=Load()),
          args=[Num(n=1)],
          keywords=[])],
        keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='model',
            ctx=Load()),
          attr='compile',
          ctx=Load()),
        args=[],
        keywords=[
          keyword(
            arg='loss',
            value=Str(s='mse')),
          keyword(
            arg='optimizer',
            value=Str(s='adam'))])),
      Return(value=Name(
        id='model',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Creating Stateful Model...')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='model_stateful',
      ctx=Store())],
    value=Call(
      func=Name(
        id='create_model',
        ctx=Load()),
      args=[],
      keywords=[keyword(
        arg='stateful',
        value=NameConstant(value=True))])),
  FunctionDef(
    name='split_data',
    args=arguments(
      args=[
        arg(
          arg='x',
          annotation=None),
        arg(
          arg='y',
          annotation=None),
        arg(
          arg='ratio',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[Num(n=0.8)]),
    body=[
      Assign(
        targets=[Name(
          id='to_train',
          ctx=Store())],
        value=Call(
          func=Name(
            id='int',
            ctx=Load()),
          args=[BinOp(
            left=Name(
              id='input_len',
              ctx=Load()),
            op=Mult(),
            right=Name(
              id='ratio',
              ctx=Load()))],
          keywords=[])),
      AugAssign(
        target=Name(
          id='to_train',
          ctx=Store()),
        op=Sub(),
        value=BinOp(
          left=Name(
            id='to_train',
            ctx=Load()),
          op=Mod(),
          right=Name(
            id='batch_size',
            ctx=Load()))),
      Assign(
        targets=[Name(
          id='x_train',
          ctx=Store())],
        value=Subscript(
          value=Name(
            id='x',
            ctx=Load()),
          slice=Slice(
            lower=None,
            upper=Name(
              id='to_train',
              ctx=Load()),
            step=None),
          ctx=Load())),
      Assign(
        targets=[Name(
          id='y_train',
          ctx=Store())],
        value=Subscript(
          value=Name(
            id='y',
            ctx=Load()),
          slice=Slice(
            lower=None,
            upper=Name(
              id='to_train',
              ctx=Load()),
            step=None),
          ctx=Load())),
      Assign(
        targets=[Name(
          id='x_test',
          ctx=Store())],
        value=Subscript(
          value=Name(
            id='x',
            ctx=Load()),
          slice=Slice(
            lower=Name(
              id='to_train',
              ctx=Load()),
            upper=None,
            step=None),
          ctx=Load())),
      Assign(
        targets=[Name(
          id='y_test',
          ctx=Store())],
        value=Subscript(
          value=Name(
            id='y',
            ctx=Load()),
          slice=Slice(
            lower=Name(
              id='to_train',
              ctx=Load()),
            upper=None,
            step=None),
          ctx=Load())),
      Assign(
        targets=[Name(
          id='to_drop',
          ctx=Store())],
        value=BinOp(
          left=Subscript(
            value=Attribute(
              value=Name(
                id='x',
                ctx=Load()),
              attr='shape',
              ctx=Load()),
            slice=Index(value=Num(n=0)),
            ctx=Load()),
          op=Mod(),
          right=Name(
            id='batch_size',
            ctx=Load()))),
      If(
        test=Compare(
          left=Name(
            id='to_drop',
            ctx=Load()),
          ops=[Gt()],
          comparators=[Num(n=0)]),
        body=[
          Assign(
            targets=[Name(
              id='x_test',
              ctx=Store())],
            value=Subscript(
              value=Name(
                id='x_test',
                ctx=Load()),
              slice=Slice(
                lower=None,
                upper=BinOp(
                  left=UnaryOp(
                    op=USub(),
                    operand=Num(n=1)),
                  op=Mult(),
                  right=Name(
                    id='to_drop',
                    ctx=Load())),
                step=None),
              ctx=Load())),
          Assign(
            targets=[Name(
              id='y_test',
              ctx=Store())],
            value=Subscript(
              value=Name(
                id='y_test',
                ctx=Load()),
              slice=Slice(
                lower=None,
                upper=BinOp(
                  left=UnaryOp(
                    op=USub(),
                    operand=Num(n=1)),
                  op=Mult(),
                  right=Name(
                    id='to_drop',
                    ctx=Load())),
                step=None),
              ctx=Load()))],
        orelse=[]),
      Assign(
        targets=[Name(
          id='reshape_3',
          ctx=Store())],
        value=Lambda(
          args=arguments(
            args=[arg(
              arg='x',
              annotation=None)],
            vararg=None,
            kwonlyargs=[],
            kw_defaults=[],
            kwarg=None,
            defaults=[]),
          body=Call(
            func=Attribute(
              value=Attribute(
                value=Name(
                  id='x',
                  ctx=Load()),
                attr='values',
                ctx=Load()),
              attr='reshape',
              ctx=Load()),
            args=[Tuple(
              elts=[
                Subscript(
                  value=Attribute(
                    value=Name(
                      id='x',
                      ctx=Load()),
                    attr='shape',
                    ctx=Load()),
                  slice=Index(value=Num(n=0)),
                  ctx=Load()),
                Subscript(
                  value=Attribute(
                    value=Name(
                      id='x',
                      ctx=Load()),
                    attr='shape',
                    ctx=Load()),
                  slice=Index(value=Num(n=1)),
                  ctx=Load()),
                Num(n=1)],
              ctx=Load())],
            keywords=[]))),
      Assign(
        targets=[Name(
          id='x_train',
          ctx=Store())],
        value=Call(
          func=Name(
            id='reshape_3',
            ctx=Load()),
          args=[Name(
            id='x_train',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='x_test',
          ctx=Store())],
        value=Call(
          func=Name(
            id='reshape_3',
            ctx=Load()),
          args=[Name(
            id='x_test',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='reshape_2',
          ctx=Store())],
        value=Lambda(
          args=arguments(
            args=[arg(
              arg='x',
              annotation=None)],
            vararg=None,
            kwonlyargs=[],
            kw_defaults=[],
            kwarg=None,
            defaults=[]),
          body=Call(
            func=Attribute(
              value=Attribute(
                value=Name(
                  id='x',
                  ctx=Load()),
                attr='values',
                ctx=Load()),
              attr='reshape',
              ctx=Load()),
            args=[Tuple(
              elts=[
                Subscript(
                  value=Attribute(
                    value=Name(
                      id='x',
                      ctx=Load()),
                    attr='shape',
                    ctx=Load()),
                  slice=Index(value=Num(n=0)),
                  ctx=Load()),
                Num(n=1)],
              ctx=Load())],
            keywords=[]))),
      Assign(
        targets=[Name(
          id='y_train',
          ctx=Store())],
        value=Call(
          func=Name(
            id='reshape_2',
            ctx=Load()),
          args=[Name(
            id='y_train',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='y_test',
          ctx=Store())],
        value=Call(
          func=Name(
            id='reshape_2',
            ctx=Load()),
          args=[Name(
            id='y_test',
            ctx=Load())],
          keywords=[])),
      Return(value=Tuple(
        elts=[
          Tuple(
            elts=[
              Name(
                id='x_train',
                ctx=Load()),
              Name(
                id='y_train',
                ctx=Load())],
            ctx=Load()),
          Tuple(
            elts=[
              Name(
                id='x_test',
                ctx=Load()),
              Name(
                id='y_test',
                ctx=Load())],
            ctx=Load())],
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  Assign(
    targets=[Tuple(
      elts=[
        Tuple(
          elts=[
            Name(
              id='x_train',
              ctx=Store()),
            Name(
              id='y_train',
              ctx=Store())],
          ctx=Store()),
        Tuple(
          elts=[
            Name(
              id='x_test',
              ctx=Store()),
            Name(
              id='y_test',
              ctx=Store())],
          ctx=Store())],
      ctx=Store())],
    value=Call(
      func=Name(
        id='split_data',
        ctx=Load()),
      args=[
        Name(
          id='data_input',
          ctx=Load()),
        Name(
          id='expected_output',
          ctx=Load())],
      keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='x_train.shape: '),
      Attribute(
        value=Name(
          id='x_train',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='y_train.shape: '),
      Attribute(
        value=Name(
          id='y_train',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='x_test.shape: '),
      Attribute(
        value=Name(
          id='x_test',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='y_test.shape: '),
      Attribute(
        value=Name(
          id='y_test',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Training')],
    keywords=[])),
  For(
    target=Name(
      id='i',
      ctx=Store()),
    iter=Call(
      func=Name(
        id='range',
        ctx=Load()),
      args=[Name(
        id='epochs',
        ctx=Load())],
      keywords=[]),
    body=[
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[
          Str(s='Epoch'),
          BinOp(
            left=Name(
              id='i',
              ctx=Load()),
            op=Add(),
            right=Num(n=1)),
          Str(s='/'),
          Name(
            id='epochs',
            ctx=Load())],
        keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='model_stateful',
            ctx=Load()),
          attr='fit',
          ctx=Load()),
        args=[
          Name(
            id='x_train',
            ctx=Load()),
          Name(
            id='y_train',
            ctx=Load())],
        keywords=[
          keyword(
            arg='batch_size',
            value=Name(
              id='batch_size',
              ctx=Load())),
          keyword(
            arg='epochs',
            value=Num(n=1)),
          keyword(
            arg='verbose',
            value=Num(n=1)),
          keyword(
            arg='validation_data',
            value=Tuple(
              elts=[
                Name(
                  id='x_test',
                  ctx=Load()),
                Name(
                  id='y_test',
                  ctx=Load())],
              ctx=Load())),
          keyword(
            arg='shuffle',
            value=NameConstant(value=False))])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='model_stateful',
            ctx=Load()),
          attr='reset_states',
          ctx=Load()),
        args=[],
        keywords=[]))],
    orelse=[]),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Predicting')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='predicted_stateful',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='model_stateful',
          ctx=Load()),
        attr='predict',
        ctx=Load()),
      args=[Name(
        id='x_test',
        ctx=Load())],
      keywords=[keyword(
        arg='batch_size',
        value=Name(
          id='batch_size',
          ctx=Load()))])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Creating Stateless Model...')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='model_stateless',
      ctx=Store())],
    value=Call(
      func=Name(
        id='create_model',
        ctx=Load()),
      args=[],
      keywords=[keyword(
        arg='stateful',
        value=NameConstant(value=False))])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Training')],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model_stateless',
        ctx=Load()),
      attr='fit',
      ctx=Load()),
    args=[
      Name(
        id='x_train',
        ctx=Load()),
      Name(
        id='y_train',
        ctx=Load())],
    keywords=[
      keyword(
        arg='batch_size',
        value=Name(
          id='batch_size',
          ctx=Load())),
      keyword(
        arg='epochs',
        value=Name(
          id='epochs',
          ctx=Load())),
      keyword(
        arg='verbose',
        value=Num(n=1)),
      keyword(
        arg='validation_data',
        value=Tuple(
          elts=[
            Name(
              id='x_test',
              ctx=Load()),
            Name(
              id='y_test',
              ctx=Load())],
          ctx=Load())),
      keyword(
        arg='shuffle',
        value=NameConstant(value=False))])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Predicting')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='predicted_stateless',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='model_stateless',
          ctx=Load()),
        attr='predict',
        ctx=Load()),
      args=[Name(
        id='x_test',
        ctx=Load())],
      keywords=[keyword(
        arg='batch_size',
        value=Name(
          id='batch_size',
          ctx=Load()))])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Plotting Results')],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='subplot',
      ctx=Load()),
    args=[
      Num(n=3),
      Num(n=1),
      Num(n=1)],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='plot',
      ctx=Load()),
    args=[Name(
      id='y_test',
      ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='title',
      ctx=Load()),
    args=[Str(s='Expected')],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='subplot',
      ctx=Load()),
    args=[
      Num(n=3),
      Num(n=1),
      Num(n=2)],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='plot',
      ctx=Load()),
    args=[Subscript(
      value=Call(
        func=Attribute(
          value=BinOp(
            left=Name(
              id='y_test',
              ctx=Load()),
            op=Sub(),
            right=Name(
              id='predicted_stateful',
              ctx=Load())),
          attr='flatten',
          ctx=Load()),
        args=[],
        keywords=[]),
      slice=Slice(
        lower=BinOp(
          left=Name(
            id='tsteps',
            ctx=Load()),
          op=Sub(),
          right=Num(n=1)),
        upper=None,
        step=None),
      ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='title',
      ctx=Load()),
    args=[Str(s='Stateful: Expected - Predicted')],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='subplot',
      ctx=Load()),
    args=[
      Num(n=3),
      Num(n=1),
      Num(n=3)],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='plot',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=BinOp(
          left=Name(
            id='y_test',
            ctx=Load()),
          op=Sub(),
          right=Name(
            id='predicted_stateless',
            ctx=Load())),
        attr='flatten',
        ctx=Load()),
      args=[],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='title',
      ctx=Load()),
    args=[Str(s='Stateless: Expected - Predicted')],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='plt',
        ctx=Load()),
      attr='show',
      ctx=Load()),
    args=[],
    keywords=[]))])