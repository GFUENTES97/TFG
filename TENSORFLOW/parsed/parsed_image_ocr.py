Module(body=[
  Expr(value=Str(s='\n# Optical character recognition\nThis example uses a convolutional stack followed by a recurrent stack\nand a CTC logloss function to perform optical character recognition\nof generated text images. I have no evidence of whether it actually\nlearns general shapes of text, or just is able to recognize all\nthe different fonts thrown at it...the purpose is more to demonstrate CTC\ninside of Keras.  Note that the font list may need to be updated\nfor the particular OS in use.\n\nThis starts off with 4 letter words.  For the first 12 epochs, the\ndifficulty is gradually increased using the TextImageGenerator class\nwhich is both a generator class for test/train data and a Keras\ncallback class. After 20 epochs, longer sequences are thrown at it\nby recompiling the model to handle a wider image and rebuilding\nthe word list to include two words separated by a space.\n\nThe table below shows normalized edit distance values. Theano uses\na slightly different CTC implementation, hence the different results.\n\nEpoch |   TF   |   TH\n-----:|-------:|-------:\n    10|  0.027 | 0.064\n    15|  0.038 | 0.035\n    20|  0.043 | 0.045\n    25|  0.014 | 0.019\n\n# Additional dependencies\n\nThis requires ```cairo``` and ```editdistance``` packages:\n\nFirst, install the Cairo library: https://cairographics.org/\n\nThen install Python dependencies:\n\n```python\npip install cairocffi\npip install editdistance\n```\n\nCreated by Mike Henry\nhttps://github.com/mbhenry/\n')),
  Import(names=[alias(
    name='os',
    asname=None)]),
  Import(names=[alias(
    name='itertools',
    asname=None)]),
  Import(names=[alias(
    name='codecs',
    asname=None)]),
  Import(names=[alias(
    name='re',
    asname=None)]),
  Import(names=[alias(
    name='datetime',
    asname=None)]),
  Import(names=[alias(
    name='cairocffi',
    asname='cairo')]),
  Import(names=[alias(
    name='editdistance',
    asname=None)]),
  Import(names=[alias(
    name='numpy',
    asname='np')]),
  ImportFrom(
    module='scipy',
    names=[alias(
      name='ndimage',
      asname=None)],
    level=0),
  Import(names=[alias(
    name='pylab',
    asname=None)]),
  ImportFrom(
    module='keras',
    names=[alias(
      name='backend',
      asname='K')],
    level=0),
  ImportFrom(
    module='keras.layers.convolutional',
    names=[
      alias(
        name='Conv2D',
        asname=None),
      alias(
        name='MaxPooling2D',
        asname=None)],
    level=0),
  ImportFrom(
    module='keras.layers',
    names=[
      alias(
        name='Input',
        asname=None),
      alias(
        name='Dense',
        asname=None),
      alias(
        name='Activation',
        asname=None)],
    level=0),
  ImportFrom(
    module='keras.layers',
    names=[
      alias(
        name='Reshape',
        asname=None),
      alias(
        name='Lambda',
        asname=None)],
    level=0),
  ImportFrom(
    module='keras.layers.merge',
    names=[
      alias(
        name='add',
        asname=None),
      alias(
        name='concatenate',
        asname=None)],
    level=0),
  ImportFrom(
    module='keras.models',
    names=[alias(
      name='Model',
      asname=None)],
    level=0),
  ImportFrom(
    module='keras.layers.recurrent',
    names=[alias(
      name='GRU',
      asname=None)],
    level=0),
  ImportFrom(
    module='keras.optimizers',
    names=[alias(
      name='SGD',
      asname=None)],
    level=0),
  ImportFrom(
    module='keras.utils.data_utils',
    names=[alias(
      name='get_file',
      asname=None)],
    level=0),
  ImportFrom(
    module='keras.preprocessing',
    names=[alias(
      name='image',
      asname=None)],
    level=0),
  Import(names=[alias(
    name='keras.callbacks',
    asname=None)]),
  Assign(
    targets=[Name(
      id='OUTPUT_DIR',
      ctx=Store())],
    value=Str(s='image_ocr')),
  Assign(
    targets=[Name(
      id='regex',
      ctx=Store())],
    value=Str(s='^[a-z ]+$')),
  Assign(
    targets=[Name(
      id='alphabet',
      ctx=Store())],
    value=Str(s='abcdefghijklmnopqrstuvwxyz ')),
  Expr(value=Call(
    func=Attribute(
      value=Attribute(
        value=Name(
          id='np',
          ctx=Load()),
        attr='random',
        ctx=Load()),
      attr='seed',
      ctx=Load()),
    args=[Num(n=55)],
    keywords=[])),
  FunctionDef(
    name='speckle',
    args=arguments(
      args=[arg(
        arg='img',
        annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      Assign(
        targets=[Name(
          id='severity',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Attribute(
              value=Name(
                id='np',
                ctx=Load()),
              attr='random',
              ctx=Load()),
            attr='uniform',
            ctx=Load()),
          args=[
            Num(n=0),
            Num(n=0.6)],
          keywords=[])),
      Assign(
        targets=[Name(
          id='blur',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='ndimage',
              ctx=Load()),
            attr='gaussian_filter',
            ctx=Load()),
          args=[
            BinOp(
              left=Call(
                func=Attribute(
                  value=Attribute(
                    value=Name(
                      id='np',
                      ctx=Load()),
                    attr='random',
                    ctx=Load()),
                  attr='randn',
                  ctx=Load()),
                args=[Starred(
                  value=Attribute(
                    value=Name(
                      id='img',
                      ctx=Load()),
                    attr='shape',
                    ctx=Load()),
                  ctx=Load())],
                keywords=[]),
              op=Mult(),
              right=Name(
                id='severity',
                ctx=Load())),
            Num(n=1)],
          keywords=[])),
      Assign(
        targets=[Name(
          id='img_speck',
          ctx=Store())],
        value=BinOp(
          left=Name(
            id='img',
            ctx=Load()),
          op=Add(),
          right=Name(
            id='blur',
            ctx=Load()))),
      Assign(
        targets=[Subscript(
          value=Name(
            id='img_speck',
            ctx=Load()),
          slice=Index(value=Compare(
            left=Name(
              id='img_speck',
              ctx=Load()),
            ops=[Gt()],
            comparators=[Num(n=1)])),
          ctx=Store())],
        value=Num(n=1)),
      Assign(
        targets=[Subscript(
          value=Name(
            id='img_speck',
            ctx=Load()),
          slice=Index(value=Compare(
            left=Name(
              id='img_speck',
              ctx=Load()),
            ops=[LtE()],
            comparators=[Num(n=0)])),
          ctx=Store())],
        value=Num(n=0)),
      Return(value=Name(
        id='img_speck',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='paint_text',
    args=arguments(
      args=[
        arg(
          arg='text',
          annotation=None),
        arg(
          arg='w',
          annotation=None),
        arg(
          arg='h',
          annotation=None),
        arg(
          arg='rotate',
          annotation=None),
        arg(
          arg='ud',
          annotation=None),
        arg(
          arg='multi_fonts',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[
        NameConstant(value=False),
        NameConstant(value=False),
        NameConstant(value=False)]),
    body=[
      Assign(
        targets=[Name(
          id='surface',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='cairo',
              ctx=Load()),
            attr='ImageSurface',
            ctx=Load()),
          args=[
            Attribute(
              value=Name(
                id='cairo',
                ctx=Load()),
              attr='FORMAT_RGB24',
              ctx=Load()),
            Name(
              id='w',
              ctx=Load()),
            Name(
              id='h',
              ctx=Load())],
          keywords=[])),
      With(
        items=[withitem(
          context_expr=Call(
            func=Attribute(
              value=Name(
                id='cairo',
                ctx=Load()),
              attr='Context',
              ctx=Load()),
            args=[Name(
              id='surface',
              ctx=Load())],
            keywords=[]),
          optional_vars=Name(
            id='context',
            ctx=Store()))],
        body=[
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='context',
                ctx=Load()),
              attr='set_source_rgb',
              ctx=Load()),
            args=[
              Num(n=1),
              Num(n=1),
              Num(n=1)],
            keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='context',
                ctx=Load()),
              attr='paint',
              ctx=Load()),
            args=[],
            keywords=[])),
          If(
            test=Name(
              id='multi_fonts',
              ctx=Load()),
            body=[
              Assign(
                targets=[Name(
                  id='fonts',
                  ctx=Store())],
                value=List(
                  elts=[
                    Str(s='Century Schoolbook'),
                    Str(s='Courier'),
                    Str(s='STIX'),
                    Str(s='URW Chancery L'),
                    Str(s='FreeMono')],
                  ctx=Load())),
              Expr(value=Call(
                func=Attribute(
                  value=Name(
                    id='context',
                    ctx=Load()),
                  attr='select_font_face',
                  ctx=Load()),
                args=[
                  Call(
                    func=Attribute(
                      value=Attribute(
                        value=Name(
                          id='np',
                          ctx=Load()),
                        attr='random',
                        ctx=Load()),
                      attr='choice',
                      ctx=Load()),
                    args=[Name(
                      id='fonts',
                      ctx=Load())],
                    keywords=[]),
                  Attribute(
                    value=Name(
                      id='cairo',
                      ctx=Load()),
                    attr='FONT_SLANT_NORMAL',
                    ctx=Load()),
                  Call(
                    func=Attribute(
                      value=Attribute(
                        value=Name(
                          id='np',
                          ctx=Load()),
                        attr='random',
                        ctx=Load()),
                      attr='choice',
                      ctx=Load()),
                    args=[List(
                      elts=[
                        Attribute(
                          value=Name(
                            id='cairo',
                            ctx=Load()),
                          attr='FONT_WEIGHT_BOLD',
                          ctx=Load()),
                        Attribute(
                          value=Name(
                            id='cairo',
                            ctx=Load()),
                          attr='FONT_WEIGHT_NORMAL',
                          ctx=Load())],
                      ctx=Load())],
                    keywords=[])],
                keywords=[]))],
            orelse=[Expr(value=Call(
              func=Attribute(
                value=Name(
                  id='context',
                  ctx=Load()),
                attr='select_font_face',
                ctx=Load()),
              args=[
                Str(s='Courier'),
                Attribute(
                  value=Name(
                    id='cairo',
                    ctx=Load()),
                  attr='FONT_SLANT_NORMAL',
                  ctx=Load()),
                Attribute(
                  value=Name(
                    id='cairo',
                    ctx=Load()),
                  attr='FONT_WEIGHT_BOLD',
                  ctx=Load())],
              keywords=[]))]),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='context',
                ctx=Load()),
              attr='set_font_size',
              ctx=Load()),
            args=[Num(n=25)],
            keywords=[])),
          Assign(
            targets=[Name(
              id='box',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='context',
                  ctx=Load()),
                attr='text_extents',
                ctx=Load()),
              args=[Name(
                id='text',
                ctx=Load())],
              keywords=[])),
          Assign(
            targets=[Name(
              id='border_w_h',
              ctx=Store())],
            value=Tuple(
              elts=[
                Num(n=4),
                Num(n=4)],
              ctx=Load())),
          If(
            test=BoolOp(
              op=Or(),
              values=[
                Compare(
                  left=Subscript(
                    value=Name(
                      id='box',
                      ctx=Load()),
                    slice=Index(value=Num(n=2)),
                    ctx=Load()),
                  ops=[Gt()],
                  comparators=[BinOp(
                    left=Name(
                      id='w',
                      ctx=Load()),
                    op=Sub(),
                    right=BinOp(
                      left=Num(n=2),
                      op=Mult(),
                      right=Subscript(
                        value=Name(
                          id='border_w_h',
                          ctx=Load()),
                        slice=Index(value=Num(n=1)),
                        ctx=Load())))]),
                Compare(
                  left=Subscript(
                    value=Name(
                      id='box',
                      ctx=Load()),
                    slice=Index(value=Num(n=3)),
                    ctx=Load()),
                  ops=[Gt()],
                  comparators=[BinOp(
                    left=Name(
                      id='h',
                      ctx=Load()),
                    op=Sub(),
                    right=BinOp(
                      left=Num(n=2),
                      op=Mult(),
                      right=Subscript(
                        value=Name(
                          id='border_w_h',
                          ctx=Load()),
                        slice=Index(value=Num(n=0)),
                        ctx=Load())))])]),
            body=[Raise(
              exc=Call(
                func=Name(
                  id='IOError',
                  ctx=Load()),
                args=[Str(s='Could not fit string into image.Max char count is too large for given image width.')],
                keywords=[]),
              cause=None)],
            orelse=[]),
          Assign(
            targets=[Name(
              id='max_shift_x',
              ctx=Store())],
            value=BinOp(
              left=BinOp(
                left=Name(
                  id='w',
                  ctx=Load()),
                op=Sub(),
                right=Subscript(
                  value=Name(
                    id='box',
                    ctx=Load()),
                  slice=Index(value=Num(n=2)),
                  ctx=Load())),
              op=Sub(),
              right=Subscript(
                value=Name(
                  id='border_w_h',
                  ctx=Load()),
                slice=Index(value=Num(n=0)),
                ctx=Load()))),
          Assign(
            targets=[Name(
              id='max_shift_y',
              ctx=Store())],
            value=BinOp(
              left=BinOp(
                left=Name(
                  id='h',
                  ctx=Load()),
                op=Sub(),
                right=Subscript(
                  value=Name(
                    id='box',
                    ctx=Load()),
                  slice=Index(value=Num(n=3)),
                  ctx=Load())),
              op=Sub(),
              right=Subscript(
                value=Name(
                  id='border_w_h',
                  ctx=Load()),
                slice=Index(value=Num(n=1)),
                ctx=Load()))),
          Assign(
            targets=[Name(
              id='top_left_x',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Attribute(
                  value=Name(
                    id='np',
                    ctx=Load()),
                  attr='random',
                  ctx=Load()),
                attr='randint',
                ctx=Load()),
              args=[
                Num(n=0),
                Call(
                  func=Name(
                    id='int',
                    ctx=Load()),
                  args=[Name(
                    id='max_shift_x',
                    ctx=Load())],
                  keywords=[])],
              keywords=[])),
          If(
            test=Name(
              id='ud',
              ctx=Load()),
            body=[Assign(
              targets=[Name(
                id='top_left_y',
                ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Attribute(
                    value=Name(
                      id='np',
                      ctx=Load()),
                    attr='random',
                    ctx=Load()),
                  attr='randint',
                  ctx=Load()),
                args=[
                  Num(n=0),
                  Call(
                    func=Name(
                      id='int',
                      ctx=Load()),
                    args=[Name(
                      id='max_shift_y',
                      ctx=Load())],
                    keywords=[])],
                keywords=[]))],
            orelse=[Assign(
              targets=[Name(
                id='top_left_y',
                ctx=Store())],
              value=BinOp(
                left=Name(
                  id='h',
                  ctx=Load()),
                op=FloorDiv(),
                right=Num(n=2)))]),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='context',
                ctx=Load()),
              attr='move_to',
              ctx=Load()),
            args=[
              BinOp(
                left=Name(
                  id='top_left_x',
                  ctx=Load()),
                op=Sub(),
                right=Call(
                  func=Name(
                    id='int',
                    ctx=Load()),
                  args=[Subscript(
                    value=Name(
                      id='box',
                      ctx=Load()),
                    slice=Index(value=Num(n=0)),
                    ctx=Load())],
                  keywords=[])),
              BinOp(
                left=Name(
                  id='top_left_y',
                  ctx=Load()),
                op=Sub(),
                right=Call(
                  func=Name(
                    id='int',
                    ctx=Load()),
                  args=[Subscript(
                    value=Name(
                      id='box',
                      ctx=Load()),
                    slice=Index(value=Num(n=1)),
                    ctx=Load())],
                  keywords=[]))],
            keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='context',
                ctx=Load()),
              attr='set_source_rgb',
              ctx=Load()),
            args=[
              Num(n=0),
              Num(n=0),
              Num(n=0)],
            keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='context',
                ctx=Load()),
              attr='show_text',
              ctx=Load()),
            args=[Name(
              id='text',
              ctx=Load())],
            keywords=[]))]),
      Assign(
        targets=[Name(
          id='buf',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='surface',
              ctx=Load()),
            attr='get_data',
            ctx=Load()),
          args=[],
          keywords=[])),
      Assign(
        targets=[Name(
          id='a',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='np',
              ctx=Load()),
            attr='frombuffer',
            ctx=Load()),
          args=[
            Name(
              id='buf',
              ctx=Load()),
            Attribute(
              value=Name(
                id='np',
                ctx=Load()),
              attr='uint8',
              ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Attribute(
          value=Name(
            id='a',
            ctx=Load()),
          attr='shape',
          ctx=Store())],
        value=Tuple(
          elts=[
            Name(
              id='h',
              ctx=Load()),
            Name(
              id='w',
              ctx=Load()),
            Num(n=4)],
          ctx=Load())),
      Assign(
        targets=[Name(
          id='a',
          ctx=Store())],
        value=Subscript(
          value=Name(
            id='a',
            ctx=Load()),
          slice=ExtSlice(dims=[
            Slice(
              lower=None,
              upper=None,
              step=None),
            Slice(
              lower=None,
              upper=None,
              step=None),
            Index(value=Num(n=0))]),
          ctx=Load())),
      Assign(
        targets=[Name(
          id='a',
          ctx=Store())],
        value=BinOp(
          left=Call(
            func=Attribute(
              value=Name(
                id='a',
                ctx=Load()),
              attr='astype',
              ctx=Load()),
            args=[Attribute(
              value=Name(
                id='np',
                ctx=Load()),
              attr='float32',
              ctx=Load())],
            keywords=[]),
          op=Div(),
          right=Num(n=255))),
      Assign(
        targets=[Name(
          id='a',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='np',
              ctx=Load()),
            attr='expand_dims',
            ctx=Load()),
          args=[
            Name(
              id='a',
              ctx=Load()),
            Num(n=0)],
          keywords=[])),
      If(
        test=Name(
          id='rotate',
          ctx=Load()),
        body=[Assign(
          targets=[Name(
            id='a',
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(
                id='image',
                ctx=Load()),
              attr='random_rotation',
              ctx=Load()),
            args=[
              Name(
                id='a',
                ctx=Load()),
              BinOp(
                left=BinOp(
                  left=BinOp(
                    left=Num(n=3),
                    op=Mult(),
                    right=BinOp(
                      left=Name(
                        id='w',
                        ctx=Load()),
                      op=Sub(),
                      right=Name(
                        id='top_left_x',
                        ctx=Load()))),
                  op=Div(),
                  right=Name(
                    id='w',
                    ctx=Load())),
                op=Add(),
                right=Num(n=1))],
            keywords=[]))],
        orelse=[]),
      Assign(
        targets=[Name(
          id='a',
          ctx=Store())],
        value=Call(
          func=Name(
            id='speckle',
            ctx=Load()),
          args=[Name(
            id='a',
            ctx=Load())],
          keywords=[])),
      Return(value=Name(
        id='a',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='shuffle_mats_or_lists',
    args=arguments(
      args=[
        arg(
          arg='matrix_list',
          annotation=None),
        arg(
          arg='stop_ind',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[NameConstant(value=None)]),
    body=[
      Assign(
        targets=[Name(
          id='ret',
          ctx=Store())],
        value=List(
          elts=[],
          ctx=Load())),
      Assert(
        test=Call(
          func=Name(
            id='all',
            ctx=Load()),
          args=[ListComp(
            elt=Compare(
              left=Call(
                func=Name(
                  id='len',
                  ctx=Load()),
                args=[Name(
                  id='i',
                  ctx=Load())],
                keywords=[]),
              ops=[Eq()],
              comparators=[Call(
                func=Name(
                  id='len',
                  ctx=Load()),
                args=[Subscript(
                  value=Name(
                    id='matrix_list',
                    ctx=Load()),
                  slice=Index(value=Num(n=0)),
                  ctx=Load())],
                keywords=[])]),
            generators=[comprehension(
              target=Name(
                id='i',
                ctx=Store()),
              iter=Name(
                id='matrix_list',
                ctx=Load()),
              ifs=[],
              is_async=0)])],
          keywords=[]),
        msg=None),
      Assign(
        targets=[Name(
          id='len_val',
          ctx=Store())],
        value=Call(
          func=Name(
            id='len',
            ctx=Load()),
          args=[Subscript(
            value=Name(
              id='matrix_list',
              ctx=Load()),
            slice=Index(value=Num(n=0)),
            ctx=Load())],
          keywords=[])),
      If(
        test=Compare(
          left=Name(
            id='stop_ind',
            ctx=Load()),
          ops=[Is()],
          comparators=[NameConstant(value=None)]),
        body=[Assign(
          targets=[Name(
            id='stop_ind',
            ctx=Store())],
          value=Name(
            id='len_val',
            ctx=Load()))],
        orelse=[]),
      Assert(
        test=Compare(
          left=Name(
            id='stop_ind',
            ctx=Load()),
          ops=[LtE()],
          comparators=[Name(
            id='len_val',
            ctx=Load())]),
        msg=None),
      Assign(
        targets=[Name(
          id='a',
          ctx=Store())],
        value=Call(
          func=Name(
            id='list',
            ctx=Load()),
          args=[Call(
            func=Name(
              id='range',
              ctx=Load()),
            args=[Name(
              id='stop_ind',
              ctx=Load())],
            keywords=[])],
          keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Attribute(
            value=Name(
              id='np',
              ctx=Load()),
            attr='random',
            ctx=Load()),
          attr='shuffle',
          ctx=Load()),
        args=[Name(
          id='a',
          ctx=Load())],
        keywords=[])),
      AugAssign(
        target=Name(
          id='a',
          ctx=Store()),
        op=Add(),
        value=Call(
          func=Name(
            id='list',
            ctx=Load()),
          args=[Call(
            func=Name(
              id='range',
              ctx=Load()),
            args=[
              Name(
                id='stop_ind',
                ctx=Load()),
              Name(
                id='len_val',
                ctx=Load())],
            keywords=[])],
          keywords=[])),
      For(
        target=Name(
          id='mat',
          ctx=Store()),
        iter=Name(
          id='matrix_list',
          ctx=Load()),
        body=[If(
          test=Call(
            func=Name(
              id='isinstance',
              ctx=Load()),
            args=[
              Name(
                id='mat',
                ctx=Load()),
              Attribute(
                value=Name(
                  id='np',
                  ctx=Load()),
                attr='ndarray',
                ctx=Load())],
            keywords=[]),
          body=[Expr(value=Call(
            func=Attribute(
              value=Name(
                id='ret',
                ctx=Load()),
              attr='append',
              ctx=Load()),
            args=[Subscript(
              value=Name(
                id='mat',
                ctx=Load()),
              slice=Index(value=Name(
                id='a',
                ctx=Load())),
              ctx=Load())],
            keywords=[]))],
          orelse=[If(
            test=Call(
              func=Name(
                id='isinstance',
                ctx=Load()),
              args=[
                Name(
                  id='mat',
                  ctx=Load()),
                Name(
                  id='list',
                  ctx=Load())],
              keywords=[]),
            body=[Expr(value=Call(
              func=Attribute(
                value=Name(
                  id='ret',
                  ctx=Load()),
                attr='append',
                ctx=Load()),
              args=[ListComp(
                elt=Subscript(
                  value=Name(
                    id='mat',
                    ctx=Load()),
                  slice=Index(value=Name(
                    id='i',
                    ctx=Load())),
                  ctx=Load()),
                generators=[comprehension(
                  target=Name(
                    id='i',
                    ctx=Store()),
                  iter=Name(
                    id='a',
                    ctx=Load()),
                  ifs=[],
                  is_async=0)])],
              keywords=[]))],
            orelse=[Raise(
              exc=Call(
                func=Name(
                  id='TypeError',
                  ctx=Load()),
                args=[Str(s='`shuffle_mats_or_lists` only supports numpy.array and list objects.')],
                keywords=[]),
              cause=None)])])],
        orelse=[]),
      Return(value=Name(
        id='ret',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='text_to_labels',
    args=arguments(
      args=[arg(
        arg='text',
        annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      Assign(
        targets=[Name(
          id='ret',
          ctx=Store())],
        value=List(
          elts=[],
          ctx=Load())),
      For(
        target=Name(
          id='char',
          ctx=Store()),
        iter=Name(
          id='text',
          ctx=Load()),
        body=[Expr(value=Call(
          func=Attribute(
            value=Name(
              id='ret',
              ctx=Load()),
            attr='append',
            ctx=Load()),
          args=[Call(
            func=Attribute(
              value=Name(
                id='alphabet',
                ctx=Load()),
              attr='find',
              ctx=Load()),
            args=[Name(
              id='char',
              ctx=Load())],
            keywords=[])],
          keywords=[]))],
        orelse=[]),
      Return(value=Name(
        id='ret',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='labels_to_text',
    args=arguments(
      args=[arg(
        arg='labels',
        annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      Assign(
        targets=[Name(
          id='ret',
          ctx=Store())],
        value=List(
          elts=[],
          ctx=Load())),
      For(
        target=Name(
          id='c',
          ctx=Store()),
        iter=Name(
          id='labels',
          ctx=Load()),
        body=[If(
          test=Compare(
            left=Name(
              id='c',
              ctx=Load()),
            ops=[Eq()],
            comparators=[Call(
              func=Name(
                id='len',
                ctx=Load()),
              args=[Name(
                id='alphabet',
                ctx=Load())],
              keywords=[])]),
          body=[Expr(value=Call(
            func=Attribute(
              value=Name(
                id='ret',
                ctx=Load()),
              attr='append',
              ctx=Load()),
            args=[Str(s='')],
            keywords=[]))],
          orelse=[Expr(value=Call(
            func=Attribute(
              value=Name(
                id='ret',
                ctx=Load()),
              attr='append',
              ctx=Load()),
            args=[Subscript(
              value=Name(
                id='alphabet',
                ctx=Load()),
              slice=Index(value=Name(
                id='c',
                ctx=Load())),
              ctx=Load())],
            keywords=[]))])],
        orelse=[]),
      Return(value=Call(
        func=Attribute(
          value=Str(s=''),
          attr='join',
          ctx=Load()),
        args=[Name(
          id='ret',
          ctx=Load())],
        keywords=[]))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='is_valid_str',
    args=arguments(
      args=[arg(
        arg='in_str',
        annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      Assign(
        targets=[Name(
          id='search',
          ctx=Store())],
        value=Attribute(
          value=Call(
            func=Attribute(
              value=Name(
                id='re',
                ctx=Load()),
              attr='compile',
              ctx=Load()),
            args=[
              Name(
                id='regex',
                ctx=Load()),
              Attribute(
                value=Name(
                  id='re',
                  ctx=Load()),
                attr='UNICODE',
                ctx=Load())],
            keywords=[]),
          attr='search',
          ctx=Load())),
      Return(value=Call(
        func=Name(
          id='bool',
          ctx=Load()),
        args=[Call(
          func=Name(
            id='search',
            ctx=Load()),
          args=[Name(
            id='in_str',
            ctx=Load())],
          keywords=[])],
        keywords=[]))],
    decorator_list=[],
    returns=None),
  ClassDef(
    name='TextImageGenerator',
    bases=[Attribute(
      value=Attribute(
        value=Name(
          id='keras',
          ctx=Load()),
        attr='callbacks',
        ctx=Load()),
      attr='Callback',
      ctx=Load())],
    keywords=[],
    body=[
      FunctionDef(
        name='__init__',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='monogram_file',
              annotation=None),
            arg(
              arg='bigram_file',
              annotation=None),
            arg(
              arg='minibatch_size',
              annotation=None),
            arg(
              arg='img_w',
              annotation=None),
            arg(
              arg='img_h',
              annotation=None),
            arg(
              arg='downsample_factor',
              annotation=None),
            arg(
              arg='val_split',
              annotation=None),
            arg(
              arg='absolute_max_string_len',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[Num(n=16)]),
        body=[
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='minibatch_size',
              ctx=Store())],
            value=Name(
              id='minibatch_size',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='img_w',
              ctx=Store())],
            value=Name(
              id='img_w',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='img_h',
              ctx=Store())],
            value=Name(
              id='img_h',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='monogram_file',
              ctx=Store())],
            value=Name(
              id='monogram_file',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='bigram_file',
              ctx=Store())],
            value=Name(
              id='bigram_file',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='downsample_factor',
              ctx=Store())],
            value=Name(
              id='downsample_factor',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='val_split',
              ctx=Store())],
            value=Name(
              id='val_split',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='blank_label',
              ctx=Store())],
            value=BinOp(
              left=Call(
                func=Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='get_output_size',
                  ctx=Load()),
                args=[],
                keywords=[]),
              op=Sub(),
              right=Num(n=1))),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='absolute_max_string_len',
              ctx=Store())],
            value=Name(
              id='absolute_max_string_len',
              ctx=Load()))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='get_output_size',
        args=arguments(
          args=[arg(
            arg='self',
            annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[Return(value=BinOp(
          left=Call(
            func=Name(
              id='len',
              ctx=Load()),
            args=[Name(
              id='alphabet',
              ctx=Load())],
            keywords=[]),
          op=Add(),
          right=Num(n=1)))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='build_word_list',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='num_words',
              annotation=None),
            arg(
              arg='max_string_len',
              annotation=None),
            arg(
              arg='mono_fraction',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[
            NameConstant(value=None),
            Num(n=0.5)]),
        body=[
          Assert(
            test=Compare(
              left=Name(
                id='max_string_len',
                ctx=Load()),
              ops=[LtE()],
              comparators=[Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='absolute_max_string_len',
                ctx=Load())]),
            msg=None),
          Assert(
            test=Compare(
              left=BinOp(
                left=Name(
                  id='num_words',
                  ctx=Load()),
                op=Mod(),
                right=Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='minibatch_size',
                  ctx=Load())),
              ops=[Eq()],
              comparators=[Num(n=0)]),
            msg=None),
          Assert(
            test=Compare(
              left=BinOp(
                left=BinOp(
                  left=Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='val_split',
                    ctx=Load()),
                  op=Mult(),
                  right=Name(
                    id='num_words',
                    ctx=Load())),
                op=Mod(),
                right=Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='minibatch_size',
                  ctx=Load())),
              ops=[Eq()],
              comparators=[Num(n=0)]),
            msg=None),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='num_words',
              ctx=Store())],
            value=Name(
              id='num_words',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='string_list',
              ctx=Store())],
            value=BinOp(
              left=List(
                elts=[Str(s='')],
                ctx=Load()),
              op=Mult(),
              right=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='num_words',
                ctx=Load()))),
          Assign(
            targets=[Name(
              id='tmp_string_list',
              ctx=Store())],
            value=List(
              elts=[],
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='max_string_len',
              ctx=Store())],
            value=Name(
              id='max_string_len',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='Y_data',
              ctx=Store())],
            value=BinOp(
              left=Call(
                func=Attribute(
                  value=Name(
                    id='np',
                    ctx=Load()),
                  attr='ones',
                  ctx=Load()),
                args=[List(
                  elts=[
                    Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='num_words',
                      ctx=Load()),
                    Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='absolute_max_string_len',
                      ctx=Load())],
                  ctx=Load())],
                keywords=[]),
              op=Mult(),
              right=UnaryOp(
                op=USub(),
                operand=Num(n=1)))),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='X_text',
              ctx=Store())],
            value=List(
              elts=[],
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='Y_len',
              ctx=Store())],
            value=BinOp(
              left=List(
                elts=[Num(n=0)],
                ctx=Load()),
              op=Mult(),
              right=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='num_words',
                ctx=Load()))),
          FunctionDef(
            name='_is_length_of_word_valid',
            args=arguments(
              args=[arg(
                arg='word',
                annotation=None)],
              vararg=None,
              kwonlyargs=[],
              kw_defaults=[],
              kwarg=None,
              defaults=[]),
            body=[Return(value=BoolOp(
              op=Or(),
              values=[
                Compare(
                  left=Name(
                    id='max_string_len',
                    ctx=Load()),
                  ops=[Eq()],
                  comparators=[UnaryOp(
                    op=USub(),
                    operand=Num(n=1))]),
                Compare(
                  left=Name(
                    id='max_string_len',
                    ctx=Load()),
                  ops=[Is()],
                  comparators=[NameConstant(value=None)]),
                Compare(
                  left=Call(
                    func=Name(
                      id='len',
                      ctx=Load()),
                    args=[Name(
                      id='word',
                      ctx=Load())],
                    keywords=[]),
                  ops=[LtE()],
                  comparators=[Name(
                    id='max_string_len',
                    ctx=Load())])]))],
            decorator_list=[],
            returns=None),
          With(
            items=[withitem(
              context_expr=Call(
                func=Attribute(
                  value=Name(
                    id='codecs',
                    ctx=Load()),
                  attr='open',
                  ctx=Load()),
                args=[Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='monogram_file',
                  ctx=Load())],
                keywords=[
                  keyword(
                    arg='mode',
                    value=Str(s='r')),
                  keyword(
                    arg='encoding',
                    value=Str(s='utf-8'))]),
              optional_vars=Name(
                id='f',
                ctx=Store()))],
            body=[For(
              target=Name(
                id='line',
                ctx=Store()),
              iter=Name(
                id='f',
                ctx=Load()),
              body=[
                If(
                  test=Compare(
                    left=Call(
                      func=Name(
                        id='len',
                        ctx=Load()),
                      args=[Name(
                        id='tmp_string_list',
                        ctx=Load())],
                      keywords=[]),
                    ops=[Eq()],
                    comparators=[Call(
                      func=Name(
                        id='int',
                        ctx=Load()),
                      args=[BinOp(
                        left=Attribute(
                          value=Name(
                            id='self',
                            ctx=Load()),
                          attr='num_words',
                          ctx=Load()),
                        op=Mult(),
                        right=Name(
                          id='mono_fraction',
                          ctx=Load()))],
                      keywords=[])]),
                  body=[Break()],
                  orelse=[]),
                Assign(
                  targets=[Name(
                    id='word',
                    ctx=Store())],
                  value=Call(
                    func=Attribute(
                      value=Name(
                        id='line',
                        ctx=Load()),
                      attr='rstrip',
                      ctx=Load()),
                    args=[],
                    keywords=[])),
                If(
                  test=Call(
                    func=Name(
                      id='_is_length_of_word_valid',
                      ctx=Load()),
                    args=[Name(
                      id='word',
                      ctx=Load())],
                    keywords=[]),
                  body=[Expr(value=Call(
                    func=Attribute(
                      value=Name(
                        id='tmp_string_list',
                        ctx=Load()),
                      attr='append',
                      ctx=Load()),
                    args=[Name(
                      id='word',
                      ctx=Load())],
                    keywords=[]))],
                  orelse=[])],
              orelse=[])]),
          With(
            items=[withitem(
              context_expr=Call(
                func=Attribute(
                  value=Name(
                    id='codecs',
                    ctx=Load()),
                  attr='open',
                  ctx=Load()),
                args=[Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='bigram_file',
                  ctx=Load())],
                keywords=[
                  keyword(
                    arg='mode',
                    value=Str(s='r')),
                  keyword(
                    arg='encoding',
                    value=Str(s='utf-8'))]),
              optional_vars=Name(
                id='f',
                ctx=Store()))],
            body=[
              Assign(
                targets=[Name(
                  id='lines',
                  ctx=Store())],
                value=Call(
                  func=Attribute(
                    value=Name(
                      id='f',
                      ctx=Load()),
                    attr='readlines',
                    ctx=Load()),
                  args=[],
                  keywords=[])),
              For(
                target=Name(
                  id='line',
                  ctx=Store()),
                iter=Name(
                  id='lines',
                  ctx=Load()),
                body=[
                  If(
                    test=Compare(
                      left=Call(
                        func=Name(
                          id='len',
                          ctx=Load()),
                        args=[Name(
                          id='tmp_string_list',
                          ctx=Load())],
                        keywords=[]),
                      ops=[Eq()],
                      comparators=[Attribute(
                        value=Name(
                          id='self',
                          ctx=Load()),
                        attr='num_words',
                        ctx=Load())]),
                    body=[Break()],
                    orelse=[]),
                  Assign(
                    targets=[Name(
                      id='columns',
                      ctx=Store())],
                    value=Call(
                      func=Attribute(
                        value=Call(
                          func=Attribute(
                            value=Name(
                              id='line',
                              ctx=Load()),
                            attr='lower',
                            ctx=Load()),
                          args=[],
                          keywords=[]),
                        attr='split',
                        ctx=Load()),
                      args=[],
                      keywords=[])),
                  Assign(
                    targets=[Name(
                      id='word',
                      ctx=Store())],
                    value=BinOp(
                      left=BinOp(
                        left=Subscript(
                          value=Name(
                            id='columns',
                            ctx=Load()),
                          slice=Index(value=Num(n=0)),
                          ctx=Load()),
                        op=Add(),
                        right=Str(s=' ')),
                      op=Add(),
                      right=Subscript(
                        value=Name(
                          id='columns',
                          ctx=Load()),
                        slice=Index(value=Num(n=1)),
                        ctx=Load()))),
                  If(
                    test=BoolOp(
                      op=And(),
                      values=[
                        Call(
                          func=Name(
                            id='is_valid_str',
                            ctx=Load()),
                          args=[Name(
                            id='word',
                            ctx=Load())],
                          keywords=[]),
                        Call(
                          func=Name(
                            id='_is_length_of_word_valid',
                            ctx=Load()),
                          args=[Name(
                            id='word',
                            ctx=Load())],
                          keywords=[])]),
                    body=[Expr(value=Call(
                      func=Attribute(
                        value=Name(
                          id='tmp_string_list',
                          ctx=Load()),
                        attr='append',
                        ctx=Load()),
                      args=[Name(
                        id='word',
                        ctx=Load())],
                      keywords=[]))],
                    orelse=[])],
                orelse=[])]),
          If(
            test=Compare(
              left=Call(
                func=Name(
                  id='len',
                  ctx=Load()),
                args=[Name(
                  id='tmp_string_list',
                  ctx=Load())],
                keywords=[]),
              ops=[NotEq()],
              comparators=[Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='num_words',
                ctx=Load())]),
            body=[Raise(
              exc=Call(
                func=Name(
                  id='IOError',
                  ctx=Load()),
                args=[Str(s='Could not pull enough wordsfrom supplied monogram and bigram files.')],
                keywords=[]),
              cause=None)],
            orelse=[]),
          Assign(
            targets=[Subscript(
              value=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='string_list',
                ctx=Load()),
              slice=Slice(
                lower=None,
                upper=None,
                step=Num(n=2)),
              ctx=Store())],
            value=Subscript(
              value=Name(
                id='tmp_string_list',
                ctx=Load()),
              slice=Slice(
                lower=None,
                upper=BinOp(
                  left=Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='num_words',
                    ctx=Load()),
                  op=FloorDiv(),
                  right=Num(n=2)),
                step=None),
              ctx=Load())),
          Assign(
            targets=[Subscript(
              value=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='string_list',
                ctx=Load()),
              slice=Slice(
                lower=Num(n=1),
                upper=None,
                step=Num(n=2)),
              ctx=Store())],
            value=Subscript(
              value=Name(
                id='tmp_string_list',
                ctx=Load()),
              slice=Slice(
                lower=BinOp(
                  left=Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='num_words',
                    ctx=Load()),
                  op=FloorDiv(),
                  right=Num(n=2)),
                upper=None,
                step=None),
              ctx=Load())),
          For(
            target=Tuple(
              elts=[
                Name(
                  id='i',
                  ctx=Store()),
                Name(
                  id='word',
                  ctx=Store())],
              ctx=Store()),
            iter=Call(
              func=Name(
                id='enumerate',
                ctx=Load()),
              args=[Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='string_list',
                ctx=Load())],
              keywords=[]),
            body=[
              Assign(
                targets=[Subscript(
                  value=Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='Y_len',
                    ctx=Load()),
                  slice=Index(value=Name(
                    id='i',
                    ctx=Load())),
                  ctx=Store())],
                value=Call(
                  func=Name(
                    id='len',
                    ctx=Load()),
                  args=[Name(
                    id='word',
                    ctx=Load())],
                  keywords=[])),
              Assign(
                targets=[Subscript(
                  value=Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='Y_data',
                    ctx=Load()),
                  slice=ExtSlice(dims=[
                    Index(value=Name(
                      id='i',
                      ctx=Load())),
                    Slice(
                      lower=Num(n=0),
                      upper=Call(
                        func=Name(
                          id='len',
                          ctx=Load()),
                        args=[Name(
                          id='word',
                          ctx=Load())],
                        keywords=[]),
                      step=None)]),
                  ctx=Store())],
                value=Call(
                  func=Name(
                    id='text_to_labels',
                    ctx=Load()),
                  args=[Name(
                    id='word',
                    ctx=Load())],
                  keywords=[])),
              Expr(value=Call(
                func=Attribute(
                  value=Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='X_text',
                    ctx=Load()),
                  attr='append',
                  ctx=Load()),
                args=[Name(
                  id='word',
                  ctx=Load())],
                keywords=[]))],
            orelse=[]),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='Y_len',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='np',
                  ctx=Load()),
                attr='expand_dims',
                ctx=Load()),
              args=[
                Call(
                  func=Attribute(
                    value=Name(
                      id='np',
                      ctx=Load()),
                    attr='array',
                    ctx=Load()),
                  args=[Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='Y_len',
                    ctx=Load())],
                  keywords=[]),
                Num(n=1)],
              keywords=[])),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='cur_val_index',
              ctx=Store())],
            value=Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='val_split',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='cur_train_index',
              ctx=Store())],
            value=Num(n=0))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='get_batch',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='index',
              annotation=None),
            arg(
              arg='size',
              annotation=None),
            arg(
              arg='train',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[
          If(
            test=Compare(
              left=Call(
                func=Attribute(
                  value=Name(
                    id='K',
                    ctx=Load()),
                  attr='image_data_format',
                  ctx=Load()),
                args=[],
                keywords=[]),
              ops=[Eq()],
              comparators=[Str(s='channels_first')]),
            body=[Assign(
              targets=[Name(
                id='X_data',
                ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(
                    id='np',
                    ctx=Load()),
                  attr='ones',
                  ctx=Load()),
                args=[List(
                  elts=[
                    Name(
                      id='size',
                      ctx=Load()),
                    Num(n=1),
                    Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='img_w',
                      ctx=Load()),
                    Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='img_h',
                      ctx=Load())],
                  ctx=Load())],
                keywords=[]))],
            orelse=[Assign(
              targets=[Name(
                id='X_data',
                ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(
                    id='np',
                    ctx=Load()),
                  attr='ones',
                  ctx=Load()),
                args=[List(
                  elts=[
                    Name(
                      id='size',
                      ctx=Load()),
                    Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='img_w',
                      ctx=Load()),
                    Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='img_h',
                      ctx=Load()),
                    Num(n=1)],
                  ctx=Load())],
                keywords=[]))]),
          Assign(
            targets=[Name(
              id='labels',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='np',
                  ctx=Load()),
                attr='ones',
                ctx=Load()),
              args=[List(
                elts=[
                  Name(
                    id='size',
                    ctx=Load()),
                  Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='absolute_max_string_len',
                    ctx=Load())],
                ctx=Load())],
              keywords=[])),
          Assign(
            targets=[Name(
              id='input_length',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='np',
                  ctx=Load()),
                attr='zeros',
                ctx=Load()),
              args=[List(
                elts=[
                  Name(
                    id='size',
                    ctx=Load()),
                  Num(n=1)],
                ctx=Load())],
              keywords=[])),
          Assign(
            targets=[Name(
              id='label_length',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='np',
                  ctx=Load()),
                attr='zeros',
                ctx=Load()),
              args=[List(
                elts=[
                  Name(
                    id='size',
                    ctx=Load()),
                  Num(n=1)],
                ctx=Load())],
              keywords=[])),
          Assign(
            targets=[Name(
              id='source_str',
              ctx=Store())],
            value=List(
              elts=[],
              ctx=Load())),
          For(
            target=Name(
              id='i',
              ctx=Store()),
            iter=Call(
              func=Name(
                id='range',
                ctx=Load()),
              args=[Name(
                id='size',
                ctx=Load())],
              keywords=[]),
            body=[If(
              test=BoolOp(
                op=And(),
                values=[
                  Name(
                    id='train',
                    ctx=Load()),
                  Compare(
                    left=Name(
                      id='i',
                      ctx=Load()),
                    ops=[Gt()],
                    comparators=[BinOp(
                      left=Name(
                        id='size',
                        ctx=Load()),
                      op=Sub(),
                      right=Num(n=4))])]),
              body=[
                If(
                  test=Compare(
                    left=Call(
                      func=Attribute(
                        value=Name(
                          id='K',
                          ctx=Load()),
                        attr='image_data_format',
                        ctx=Load()),
                      args=[],
                      keywords=[]),
                    ops=[Eq()],
                    comparators=[Str(s='channels_first')]),
                  body=[Assign(
                    targets=[Subscript(
                      value=Name(
                        id='X_data',
                        ctx=Load()),
                      slice=ExtSlice(dims=[
                        Index(value=Name(
                          id='i',
                          ctx=Load())),
                        Index(value=Num(n=0)),
                        Slice(
                          lower=Num(n=0),
                          upper=Attribute(
                            value=Name(
                              id='self',
                              ctx=Load()),
                            attr='img_w',
                            ctx=Load()),
                          step=None),
                        Slice(
                          lower=None,
                          upper=None,
                          step=None)]),
                      ctx=Store())],
                    value=Attribute(
                      value=Subscript(
                        value=Call(
                          func=Attribute(
                            value=Name(
                              id='self',
                              ctx=Load()),
                            attr='paint_func',
                            ctx=Load()),
                          args=[Str(s='')],
                          keywords=[]),
                        slice=ExtSlice(dims=[
                          Index(value=Num(n=0)),
                          Slice(
                            lower=None,
                            upper=None,
                            step=None),
                          Slice(
                            lower=None,
                            upper=None,
                            step=None)]),
                        ctx=Load()),
                      attr='T',
                      ctx=Load()))],
                  orelse=[Assign(
                    targets=[Subscript(
                      value=Name(
                        id='X_data',
                        ctx=Load()),
                      slice=ExtSlice(dims=[
                        Index(value=Name(
                          id='i',
                          ctx=Load())),
                        Slice(
                          lower=Num(n=0),
                          upper=Attribute(
                            value=Name(
                              id='self',
                              ctx=Load()),
                            attr='img_w',
                            ctx=Load()),
                          step=None),
                        Slice(
                          lower=None,
                          upper=None,
                          step=None),
                        Index(value=Num(n=0))]),
                      ctx=Store())],
                    value=Attribute(
                      value=Subscript(
                        value=Call(
                          func=Attribute(
                            value=Name(
                              id='self',
                              ctx=Load()),
                            attr='paint_func',
                            ctx=Load()),
                          args=[Str(s='')],
                          keywords=[]),
                        slice=ExtSlice(dims=[
                          Index(value=Num(n=0)),
                          Slice(
                            lower=None,
                            upper=None,
                            step=None),
                          Slice(
                            lower=None,
                            upper=None,
                            step=None)]),
                        ctx=Load()),
                      attr='T',
                      ctx=Load()))]),
                Assign(
                  targets=[Subscript(
                    value=Name(
                      id='labels',
                      ctx=Load()),
                    slice=Index(value=Tuple(
                      elts=[
                        Name(
                          id='i',
                          ctx=Load()),
                        Num(n=0)],
                      ctx=Load())),
                    ctx=Store())],
                  value=Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='blank_label',
                    ctx=Load())),
                Assign(
                  targets=[Subscript(
                    value=Name(
                      id='input_length',
                      ctx=Load()),
                    slice=Index(value=Name(
                      id='i',
                      ctx=Load())),
                    ctx=Store())],
                  value=BinOp(
                    left=BinOp(
                      left=Attribute(
                        value=Name(
                          id='self',
                          ctx=Load()),
                        attr='img_w',
                        ctx=Load()),
                      op=FloorDiv(),
                      right=Attribute(
                        value=Name(
                          id='self',
                          ctx=Load()),
                        attr='downsample_factor',
                        ctx=Load())),
                    op=Sub(),
                    right=Num(n=2))),
                Assign(
                  targets=[Subscript(
                    value=Name(
                      id='label_length',
                      ctx=Load()),
                    slice=Index(value=Name(
                      id='i',
                      ctx=Load())),
                    ctx=Store())],
                  value=Num(n=1)),
                Expr(value=Call(
                  func=Attribute(
                    value=Name(
                      id='source_str',
                      ctx=Load()),
                    attr='append',
                    ctx=Load()),
                  args=[Str(s='')],
                  keywords=[]))],
              orelse=[
                If(
                  test=Compare(
                    left=Call(
                      func=Attribute(
                        value=Name(
                          id='K',
                          ctx=Load()),
                        attr='image_data_format',
                        ctx=Load()),
                      args=[],
                      keywords=[]),
                    ops=[Eq()],
                    comparators=[Str(s='channels_first')]),
                  body=[Assign(
                    targets=[Subscript(
                      value=Name(
                        id='X_data',
                        ctx=Load()),
                      slice=ExtSlice(dims=[
                        Index(value=Name(
                          id='i',
                          ctx=Load())),
                        Index(value=Num(n=0)),
                        Slice(
                          lower=Num(n=0),
                          upper=Attribute(
                            value=Name(
                              id='self',
                              ctx=Load()),
                            attr='img_w',
                            ctx=Load()),
                          step=None),
                        Slice(
                          lower=None,
                          upper=None,
                          step=None)]),
                      ctx=Store())],
                    value=Attribute(
                      value=Subscript(
                        value=Call(
                          func=Attribute(
                            value=Name(
                              id='self',
                              ctx=Load()),
                            attr='paint_func',
                            ctx=Load()),
                          args=[Subscript(
                            value=Attribute(
                              value=Name(
                                id='self',
                                ctx=Load()),
                              attr='X_text',
                              ctx=Load()),
                            slice=Index(value=BinOp(
                              left=Name(
                                id='index',
                                ctx=Load()),
                              op=Add(),
                              right=Name(
                                id='i',
                                ctx=Load()))),
                            ctx=Load())],
                          keywords=[]),
                        slice=ExtSlice(dims=[
                          Index(value=Num(n=0)),
                          Slice(
                            lower=None,
                            upper=None,
                            step=None),
                          Slice(
                            lower=None,
                            upper=None,
                            step=None)]),
                        ctx=Load()),
                      attr='T',
                      ctx=Load()))],
                  orelse=[Assign(
                    targets=[Subscript(
                      value=Name(
                        id='X_data',
                        ctx=Load()),
                      slice=ExtSlice(dims=[
                        Index(value=Name(
                          id='i',
                          ctx=Load())),
                        Slice(
                          lower=Num(n=0),
                          upper=Attribute(
                            value=Name(
                              id='self',
                              ctx=Load()),
                            attr='img_w',
                            ctx=Load()),
                          step=None),
                        Slice(
                          lower=None,
                          upper=None,
                          step=None),
                        Index(value=Num(n=0))]),
                      ctx=Store())],
                    value=Attribute(
                      value=Subscript(
                        value=Call(
                          func=Attribute(
                            value=Name(
                              id='self',
                              ctx=Load()),
                            attr='paint_func',
                            ctx=Load()),
                          args=[Subscript(
                            value=Attribute(
                              value=Name(
                                id='self',
                                ctx=Load()),
                              attr='X_text',
                              ctx=Load()),
                            slice=Index(value=BinOp(
                              left=Name(
                                id='index',
                                ctx=Load()),
                              op=Add(),
                              right=Name(
                                id='i',
                                ctx=Load()))),
                            ctx=Load())],
                          keywords=[]),
                        slice=ExtSlice(dims=[
                          Index(value=Num(n=0)),
                          Slice(
                            lower=None,
                            upper=None,
                            step=None),
                          Slice(
                            lower=None,
                            upper=None,
                            step=None)]),
                        ctx=Load()),
                      attr='T',
                      ctx=Load()))]),
                Assign(
                  targets=[Subscript(
                    value=Name(
                      id='labels',
                      ctx=Load()),
                    slice=ExtSlice(dims=[
                      Index(value=Name(
                        id='i',
                        ctx=Load())),
                      Slice(
                        lower=None,
                        upper=None,
                        step=None)]),
                    ctx=Store())],
                  value=Subscript(
                    value=Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='Y_data',
                      ctx=Load()),
                    slice=Index(value=BinOp(
                      left=Name(
                        id='index',
                        ctx=Load()),
                      op=Add(),
                      right=Name(
                        id='i',
                        ctx=Load()))),
                    ctx=Load())),
                Assign(
                  targets=[Subscript(
                    value=Name(
                      id='input_length',
                      ctx=Load()),
                    slice=Index(value=Name(
                      id='i',
                      ctx=Load())),
                    ctx=Store())],
                  value=BinOp(
                    left=BinOp(
                      left=Attribute(
                        value=Name(
                          id='self',
                          ctx=Load()),
                        attr='img_w',
                        ctx=Load()),
                      op=FloorDiv(),
                      right=Attribute(
                        value=Name(
                          id='self',
                          ctx=Load()),
                        attr='downsample_factor',
                        ctx=Load())),
                    op=Sub(),
                    right=Num(n=2))),
                Assign(
                  targets=[Subscript(
                    value=Name(
                      id='label_length',
                      ctx=Load()),
                    slice=Index(value=Name(
                      id='i',
                      ctx=Load())),
                    ctx=Store())],
                  value=Subscript(
                    value=Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='Y_len',
                      ctx=Load()),
                    slice=Index(value=BinOp(
                      left=Name(
                        id='index',
                        ctx=Load()),
                      op=Add(),
                      right=Name(
                        id='i',
                        ctx=Load()))),
                    ctx=Load())),
                Expr(value=Call(
                  func=Attribute(
                    value=Name(
                      id='source_str',
                      ctx=Load()),
                    attr='append',
                    ctx=Load()),
                  args=[Subscript(
                    value=Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='X_text',
                      ctx=Load()),
                    slice=Index(value=BinOp(
                      left=Name(
                        id='index',
                        ctx=Load()),
                      op=Add(),
                      right=Name(
                        id='i',
                        ctx=Load()))),
                    ctx=Load())],
                  keywords=[]))])],
            orelse=[]),
          Assign(
            targets=[Name(
              id='inputs',
              ctx=Store())],
            value=Dict(
              keys=[
                Str(s='the_input'),
                Str(s='the_labels'),
                Str(s='input_length'),
                Str(s='label_length'),
                Str(s='source_str')],
              values=[
                Name(
                  id='X_data',
                  ctx=Load()),
                Name(
                  id='labels',
                  ctx=Load()),
                Name(
                  id='input_length',
                  ctx=Load()),
                Name(
                  id='label_length',
                  ctx=Load()),
                Name(
                  id='source_str',
                  ctx=Load())])),
          Assign(
            targets=[Name(
              id='outputs',
              ctx=Store())],
            value=Dict(
              keys=[Str(s='ctc')],
              values=[Call(
                func=Attribute(
                  value=Name(
                    id='np',
                    ctx=Load()),
                  attr='zeros',
                  ctx=Load()),
                args=[List(
                  elts=[Name(
                    id='size',
                    ctx=Load())],
                  ctx=Load())],
                keywords=[])])),
          Return(value=Tuple(
            elts=[
              Name(
                id='inputs',
                ctx=Load()),
              Name(
                id='outputs',
                ctx=Load())],
            ctx=Load()))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='next_train',
        args=arguments(
          args=[arg(
            arg='self',
            annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[While(
          test=Num(n=1),
          body=[
            Assign(
              targets=[Name(
                id='ret',
                ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='get_batch',
                  ctx=Load()),
                args=[
                  Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='cur_train_index',
                    ctx=Load()),
                  Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='minibatch_size',
                    ctx=Load())],
                keywords=[keyword(
                  arg='train',
                  value=NameConstant(value=True))])),
            AugAssign(
              target=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='cur_train_index',
                ctx=Store()),
              op=Add(),
              value=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='minibatch_size',
                ctx=Load())),
            If(
              test=Compare(
                left=Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='cur_train_index',
                  ctx=Load()),
                ops=[GtE()],
                comparators=[Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='val_split',
                  ctx=Load())]),
              body=[
                Assign(
                  targets=[Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='cur_train_index',
                    ctx=Store())],
                  value=BinOp(
                    left=Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='cur_train_index',
                      ctx=Load()),
                    op=Mod(),
                    right=Num(n=32))),
                Assign(
                  targets=[Tuple(
                    elts=[
                      Attribute(
                        value=Name(
                          id='self',
                          ctx=Load()),
                        attr='X_text',
                        ctx=Store()),
                      Attribute(
                        value=Name(
                          id='self',
                          ctx=Load()),
                        attr='Y_data',
                        ctx=Store()),
                      Attribute(
                        value=Name(
                          id='self',
                          ctx=Load()),
                        attr='Y_len',
                        ctx=Store())],
                    ctx=Store())],
                  value=Call(
                    func=Name(
                      id='shuffle_mats_or_lists',
                      ctx=Load()),
                    args=[
                      List(
                        elts=[
                          Attribute(
                            value=Name(
                              id='self',
                              ctx=Load()),
                            attr='X_text',
                            ctx=Load()),
                          Attribute(
                            value=Name(
                              id='self',
                              ctx=Load()),
                            attr='Y_data',
                            ctx=Load()),
                          Attribute(
                            value=Name(
                              id='self',
                              ctx=Load()),
                            attr='Y_len',
                            ctx=Load())],
                        ctx=Load()),
                      Attribute(
                        value=Name(
                          id='self',
                          ctx=Load()),
                        attr='val_split',
                        ctx=Load())],
                    keywords=[]))],
              orelse=[]),
            Expr(value=Yield(value=Name(
              id='ret',
              ctx=Load())))],
          orelse=[])],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='next_val',
        args=arguments(
          args=[arg(
            arg='self',
            annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[While(
          test=Num(n=1),
          body=[
            Assign(
              targets=[Name(
                id='ret',
                ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='get_batch',
                  ctx=Load()),
                args=[
                  Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='cur_val_index',
                    ctx=Load()),
                  Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='minibatch_size',
                    ctx=Load())],
                keywords=[keyword(
                  arg='train',
                  value=NameConstant(value=False))])),
            AugAssign(
              target=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='cur_val_index',
                ctx=Store()),
              op=Add(),
              value=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='minibatch_size',
                ctx=Load())),
            If(
              test=Compare(
                left=Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='cur_val_index',
                  ctx=Load()),
                ops=[GtE()],
                comparators=[Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='num_words',
                  ctx=Load())]),
              body=[Assign(
                targets=[Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='cur_val_index',
                  ctx=Store())],
                value=BinOp(
                  left=Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='val_split',
                    ctx=Load()),
                  op=Add(),
                  right=BinOp(
                    left=Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='cur_val_index',
                      ctx=Load()),
                    op=Mod(),
                    right=Num(n=32))))],
              orelse=[]),
            Expr(value=Yield(value=Name(
              id='ret',
              ctx=Load())))],
          orelse=[])],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='on_train_begin',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='logs',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[Dict(
            keys=[],
            values=[])]),
        body=[
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='build_word_list',
              ctx=Load()),
            args=[
              Num(n=16000),
              Num(n=4),
              Num(n=1)],
            keywords=[])),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='paint_func',
              ctx=Store())],
            value=Lambda(
              args=arguments(
                args=[arg(
                  arg='text',
                  annotation=None)],
                vararg=None,
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[]),
              body=Call(
                func=Name(
                  id='paint_text',
                  ctx=Load()),
                args=[
                  Name(
                    id='text',
                    ctx=Load()),
                  Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='img_w',
                    ctx=Load()),
                  Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='img_h',
                    ctx=Load())],
                keywords=[
                  keyword(
                    arg='rotate',
                    value=NameConstant(value=False)),
                  keyword(
                    arg='ud',
                    value=NameConstant(value=False)),
                  keyword(
                    arg='multi_fonts',
                    value=NameConstant(value=False))])))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='on_epoch_begin',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='epoch',
              annotation=None),
            arg(
              arg='logs',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[Dict(
            keys=[],
            values=[])]),
        body=[
          If(
            test=Compare(
              left=Num(n=3),
              ops=[
                LtE(),
                Lt()],
              comparators=[
                Name(
                  id='epoch',
                  ctx=Load()),
                Num(n=6)]),
            body=[Assign(
              targets=[Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='paint_func',
                ctx=Store())],
              value=Lambda(
                args=arguments(
                  args=[arg(
                    arg='text',
                    annotation=None)],
                  vararg=None,
                  kwonlyargs=[],
                  kw_defaults=[],
                  kwarg=None,
                  defaults=[]),
                body=Call(
                  func=Name(
                    id='paint_text',
                    ctx=Load()),
                  args=[
                    Name(
                      id='text',
                      ctx=Load()),
                    Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='img_w',
                      ctx=Load()),
                    Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='img_h',
                      ctx=Load())],
                  keywords=[
                    keyword(
                      arg='rotate',
                      value=NameConstant(value=False)),
                    keyword(
                      arg='ud',
                      value=NameConstant(value=True)),
                    keyword(
                      arg='multi_fonts',
                      value=NameConstant(value=False))])))],
            orelse=[If(
              test=Compare(
                left=Num(n=6),
                ops=[
                  LtE(),
                  Lt()],
                comparators=[
                  Name(
                    id='epoch',
                    ctx=Load()),
                  Num(n=9)]),
              body=[Assign(
                targets=[Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='paint_func',
                  ctx=Store())],
                value=Lambda(
                  args=arguments(
                    args=[arg(
                      arg='text',
                      annotation=None)],
                    vararg=None,
                    kwonlyargs=[],
                    kw_defaults=[],
                    kwarg=None,
                    defaults=[]),
                  body=Call(
                    func=Name(
                      id='paint_text',
                      ctx=Load()),
                    args=[
                      Name(
                        id='text',
                        ctx=Load()),
                      Attribute(
                        value=Name(
                          id='self',
                          ctx=Load()),
                        attr='img_w',
                        ctx=Load()),
                      Attribute(
                        value=Name(
                          id='self',
                          ctx=Load()),
                        attr='img_h',
                        ctx=Load())],
                    keywords=[
                      keyword(
                        arg='rotate',
                        value=NameConstant(value=False)),
                      keyword(
                        arg='ud',
                        value=NameConstant(value=True)),
                      keyword(
                        arg='multi_fonts',
                        value=NameConstant(value=True))])))],
              orelse=[If(
                test=Compare(
                  left=Name(
                    id='epoch',
                    ctx=Load()),
                  ops=[GtE()],
                  comparators=[Num(n=9)]),
                body=[Assign(
                  targets=[Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='paint_func',
                    ctx=Store())],
                  value=Lambda(
                    args=arguments(
                      args=[arg(
                        arg='text',
                        annotation=None)],
                      vararg=None,
                      kwonlyargs=[],
                      kw_defaults=[],
                      kwarg=None,
                      defaults=[]),
                    body=Call(
                      func=Name(
                        id='paint_text',
                        ctx=Load()),
                      args=[
                        Name(
                          id='text',
                          ctx=Load()),
                        Attribute(
                          value=Name(
                            id='self',
                            ctx=Load()),
                          attr='img_w',
                          ctx=Load()),
                        Attribute(
                          value=Name(
                            id='self',
                            ctx=Load()),
                          attr='img_h',
                          ctx=Load())],
                      keywords=[
                        keyword(
                          arg='rotate',
                          value=NameConstant(value=True)),
                        keyword(
                          arg='ud',
                          value=NameConstant(value=True)),
                        keyword(
                          arg='multi_fonts',
                          value=NameConstant(value=True))])))],
                orelse=[])])]),
          If(
            test=BoolOp(
              op=And(),
              values=[
                Compare(
                  left=Name(
                    id='epoch',
                    ctx=Load()),
                  ops=[GtE()],
                  comparators=[Num(n=21)]),
                Compare(
                  left=Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='max_string_len',
                    ctx=Load()),
                  ops=[Lt()],
                  comparators=[Num(n=12)])]),
            body=[Expr(value=Call(
              func=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='build_word_list',
                ctx=Load()),
              args=[
                Num(n=32000),
                Num(n=12),
                Num(n=0.5)],
              keywords=[]))],
            orelse=[])],
        decorator_list=[],
        returns=None)],
    decorator_list=[]),
  FunctionDef(
    name='ctc_lambda_func',
    args=arguments(
      args=[arg(
        arg='args',
        annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      Assign(
        targets=[Tuple(
          elts=[
            Name(
              id='y_pred',
              ctx=Store()),
            Name(
              id='labels',
              ctx=Store()),
            Name(
              id='input_length',
              ctx=Store()),
            Name(
              id='label_length',
              ctx=Store())],
          ctx=Store())],
        value=Name(
          id='args',
          ctx=Load())),
      Assign(
        targets=[Name(
          id='y_pred',
          ctx=Store())],
        value=Subscript(
          value=Name(
            id='y_pred',
            ctx=Load()),
          slice=ExtSlice(dims=[
            Slice(
              lower=None,
              upper=None,
              step=None),
            Slice(
              lower=Num(n=2),
              upper=None,
              step=None),
            Slice(
              lower=None,
              upper=None,
              step=None)]),
          ctx=Load())),
      Return(value=Call(
        func=Attribute(
          value=Name(
            id='K',
            ctx=Load()),
          attr='ctc_batch_cost',
          ctx=Load()),
        args=[
          Name(
            id='labels',
            ctx=Load()),
          Name(
            id='y_pred',
            ctx=Load()),
          Name(
            id='input_length',
            ctx=Load()),
          Name(
            id='label_length',
            ctx=Load())],
        keywords=[]))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='decode_batch',
    args=arguments(
      args=[
        arg(
          arg='test_func',
          annotation=None),
        arg(
          arg='word_batch',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      Assign(
        targets=[Name(
          id='out',
          ctx=Store())],
        value=Subscript(
          value=Call(
            func=Name(
              id='test_func',
              ctx=Load()),
            args=[List(
              elts=[Name(
                id='word_batch',
                ctx=Load())],
              ctx=Load())],
            keywords=[]),
          slice=Index(value=Num(n=0)),
          ctx=Load())),
      Assign(
        targets=[Name(
          id='ret',
          ctx=Store())],
        value=List(
          elts=[],
          ctx=Load())),
      For(
        target=Name(
          id='j',
          ctx=Store()),
        iter=Call(
          func=Name(
            id='range',
            ctx=Load()),
          args=[Subscript(
            value=Attribute(
              value=Name(
                id='out',
                ctx=Load()),
              attr='shape',
              ctx=Load()),
            slice=Index(value=Num(n=0)),
            ctx=Load())],
          keywords=[]),
        body=[
          Assign(
            targets=[Name(
              id='out_best',
              ctx=Store())],
            value=Call(
              func=Name(
                id='list',
                ctx=Load()),
              args=[Call(
                func=Attribute(
                  value=Name(
                    id='np',
                    ctx=Load()),
                  attr='argmax',
                  ctx=Load()),
                args=[
                  Subscript(
                    value=Name(
                      id='out',
                      ctx=Load()),
                    slice=ExtSlice(dims=[
                      Index(value=Name(
                        id='j',
                        ctx=Load())),
                      Slice(
                        lower=Num(n=2),
                        upper=None,
                        step=None)]),
                    ctx=Load()),
                  Num(n=1)],
                keywords=[])],
              keywords=[])),
          Assign(
            targets=[Name(
              id='out_best',
              ctx=Store())],
            value=ListComp(
              elt=Name(
                id='k',
                ctx=Load()),
              generators=[comprehension(
                target=Tuple(
                  elts=[
                    Name(
                      id='k',
                      ctx=Store()),
                    Name(
                      id='g',
                      ctx=Store())],
                  ctx=Store()),
                iter=Call(
                  func=Attribute(
                    value=Name(
                      id='itertools',
                      ctx=Load()),
                    attr='groupby',
                    ctx=Load()),
                  args=[Name(
                    id='out_best',
                    ctx=Load())],
                  keywords=[]),
                ifs=[],
                is_async=0)])),
          Assign(
            targets=[Name(
              id='outstr',
              ctx=Store())],
            value=Call(
              func=Name(
                id='labels_to_text',
                ctx=Load()),
              args=[Name(
                id='out_best',
                ctx=Load())],
              keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='ret',
                ctx=Load()),
              attr='append',
              ctx=Load()),
            args=[Name(
              id='outstr',
              ctx=Load())],
            keywords=[]))],
        orelse=[]),
      Return(value=Name(
        id='ret',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  ClassDef(
    name='VizCallback',
    bases=[Attribute(
      value=Attribute(
        value=Name(
          id='keras',
          ctx=Load()),
        attr='callbacks',
        ctx=Load()),
      attr='Callback',
      ctx=Load())],
    keywords=[],
    body=[
      FunctionDef(
        name='__init__',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='run_name',
              annotation=None),
            arg(
              arg='test_func',
              annotation=None),
            arg(
              arg='text_img_gen',
              annotation=None),
            arg(
              arg='num_display_words',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[Num(n=6)]),
        body=[
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='test_func',
              ctx=Store())],
            value=Name(
              id='test_func',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='output_dir',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Attribute(
                  value=Name(
                    id='os',
                    ctx=Load()),
                  attr='path',
                  ctx=Load()),
                attr='join',
                ctx=Load()),
              args=[
                Name(
                  id='OUTPUT_DIR',
                  ctx=Load()),
                Name(
                  id='run_name',
                  ctx=Load())],
              keywords=[])),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='text_img_gen',
              ctx=Store())],
            value=Name(
              id='text_img_gen',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='num_display_words',
              ctx=Store())],
            value=Name(
              id='num_display_words',
              ctx=Load())),
          If(
            test=UnaryOp(
              op=Not(),
              operand=Call(
                func=Attribute(
                  value=Attribute(
                    value=Name(
                      id='os',
                      ctx=Load()),
                    attr='path',
                    ctx=Load()),
                  attr='exists',
                  ctx=Load()),
                args=[Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='output_dir',
                  ctx=Load())],
                keywords=[])),
            body=[Expr(value=Call(
              func=Attribute(
                value=Name(
                  id='os',
                  ctx=Load()),
                attr='makedirs',
                ctx=Load()),
              args=[Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='output_dir',
                ctx=Load())],
              keywords=[]))],
            orelse=[])],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='show_edit_distance',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='num',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[
          Assign(
            targets=[Name(
              id='num_left',
              ctx=Store())],
            value=Name(
              id='num',
              ctx=Load())),
          Assign(
            targets=[Name(
              id='mean_norm_ed',
              ctx=Store())],
            value=Num(n=0.0)),
          Assign(
            targets=[Name(
              id='mean_ed',
              ctx=Store())],
            value=Num(n=0.0)),
          While(
            test=Compare(
              left=Name(
                id='num_left',
                ctx=Load()),
              ops=[Gt()],
              comparators=[Num(n=0)]),
            body=[
              Assign(
                targets=[Name(
                  id='word_batch',
                  ctx=Store())],
                value=Subscript(
                  value=Call(
                    func=Name(
                      id='next',
                      ctx=Load()),
                    args=[Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='text_img_gen',
                      ctx=Load())],
                    keywords=[]),
                  slice=Index(value=Num(n=0)),
                  ctx=Load())),
              Assign(
                targets=[Name(
                  id='num_proc',
                  ctx=Store())],
                value=Call(
                  func=Name(
                    id='min',
                    ctx=Load()),
                  args=[
                    Subscript(
                      value=Attribute(
                        value=Subscript(
                          value=Name(
                            id='word_batch',
                            ctx=Load()),
                          slice=Index(value=Str(s='the_input')),
                          ctx=Load()),
                        attr='shape',
                        ctx=Load()),
                      slice=Index(value=Num(n=0)),
                      ctx=Load()),
                    Name(
                      id='num_left',
                      ctx=Load())],
                  keywords=[])),
              Assign(
                targets=[Name(
                  id='decoded_res',
                  ctx=Store())],
                value=Call(
                  func=Name(
                    id='decode_batch',
                    ctx=Load()),
                  args=[
                    Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='test_func',
                      ctx=Load()),
                    Subscript(
                      value=Subscript(
                        value=Name(
                          id='word_batch',
                          ctx=Load()),
                        slice=Index(value=Str(s='the_input')),
                        ctx=Load()),
                      slice=Slice(
                        lower=Num(n=0),
                        upper=Name(
                          id='num_proc',
                          ctx=Load()),
                        step=None),
                      ctx=Load())],
                  keywords=[])),
              For(
                target=Name(
                  id='j',
                  ctx=Store()),
                iter=Call(
                  func=Name(
                    id='range',
                    ctx=Load()),
                  args=[Name(
                    id='num_proc',
                    ctx=Load())],
                  keywords=[]),
                body=[
                  Assign(
                    targets=[Name(
                      id='edit_dist',
                      ctx=Store())],
                    value=Call(
                      func=Attribute(
                        value=Name(
                          id='editdistance',
                          ctx=Load()),
                        attr='eval',
                        ctx=Load()),
                      args=[
                        Subscript(
                          value=Name(
                            id='decoded_res',
                            ctx=Load()),
                          slice=Index(value=Name(
                            id='j',
                            ctx=Load())),
                          ctx=Load()),
                        Subscript(
                          value=Subscript(
                            value=Name(
                              id='word_batch',
                              ctx=Load()),
                            slice=Index(value=Str(s='source_str')),
                            ctx=Load()),
                          slice=Index(value=Name(
                            id='j',
                            ctx=Load())),
                          ctx=Load())],
                      keywords=[])),
                  AugAssign(
                    target=Name(
                      id='mean_ed',
                      ctx=Store()),
                    op=Add(),
                    value=Call(
                      func=Name(
                        id='float',
                        ctx=Load()),
                      args=[Name(
                        id='edit_dist',
                        ctx=Load())],
                      keywords=[])),
                  AugAssign(
                    target=Name(
                      id='mean_norm_ed',
                      ctx=Store()),
                    op=Add(),
                    value=BinOp(
                      left=Call(
                        func=Name(
                          id='float',
                          ctx=Load()),
                        args=[Name(
                          id='edit_dist',
                          ctx=Load())],
                        keywords=[]),
                      op=Div(),
                      right=Call(
                        func=Name(
                          id='len',
                          ctx=Load()),
                        args=[Subscript(
                          value=Subscript(
                            value=Name(
                              id='word_batch',
                              ctx=Load()),
                            slice=Index(value=Str(s='source_str')),
                            ctx=Load()),
                          slice=Index(value=Name(
                            id='j',
                            ctx=Load())),
                          ctx=Load())],
                        keywords=[])))],
                orelse=[]),
              AugAssign(
                target=Name(
                  id='num_left',
                  ctx=Store()),
                op=Sub(),
                value=Name(
                  id='num_proc',
                  ctx=Load()))],
            orelse=[]),
          Assign(
            targets=[Name(
              id='mean_norm_ed',
              ctx=Store())],
            value=BinOp(
              left=Name(
                id='mean_norm_ed',
                ctx=Load()),
              op=Div(),
              right=Name(
                id='num',
                ctx=Load()))),
          Assign(
            targets=[Name(
              id='mean_ed',
              ctx=Store())],
            value=BinOp(
              left=Name(
                id='mean_ed',
                ctx=Load()),
              op=Div(),
              right=Name(
                id='num',
                ctx=Load()))),
          Expr(value=Call(
            func=Name(
              id='print',
              ctx=Load()),
            args=[BinOp(
              left=Str(s='\nOut of %d samples:  Mean edit distance:%.3f Mean normalized edit distance: %0.3f'),
              op=Mod(),
              right=Tuple(
                elts=[
                  Name(
                    id='num',
                    ctx=Load()),
                  Name(
                    id='mean_ed',
                    ctx=Load()),
                  Name(
                    id='mean_norm_ed',
                    ctx=Load())],
                ctx=Load()))],
            keywords=[]))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='on_epoch_end',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='epoch',
              annotation=None),
            arg(
              arg='logs',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[Dict(
            keys=[],
            values=[])]),
        body=[
          Expr(value=Call(
            func=Attribute(
              value=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='model',
                ctx=Load()),
              attr='save_weights',
              ctx=Load()),
            args=[Call(
              func=Attribute(
                value=Attribute(
                  value=Name(
                    id='os',
                    ctx=Load()),
                  attr='path',
                  ctx=Load()),
                attr='join',
                ctx=Load()),
              args=[
                Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='output_dir',
                  ctx=Load()),
                BinOp(
                  left=Str(s='weights%02d.h5'),
                  op=Mod(),
                  right=Name(
                    id='epoch',
                    ctx=Load()))],
              keywords=[])],
            keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='show_edit_distance',
              ctx=Load()),
            args=[Num(n=256)],
            keywords=[])),
          Assign(
            targets=[Name(
              id='word_batch',
              ctx=Store())],
            value=Subscript(
              value=Call(
                func=Name(
                  id='next',
                  ctx=Load()),
                args=[Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='text_img_gen',
                  ctx=Load())],
                keywords=[]),
              slice=Index(value=Num(n=0)),
              ctx=Load())),
          Assign(
            targets=[Name(
              id='res',
              ctx=Store())],
            value=Call(
              func=Name(
                id='decode_batch',
                ctx=Load()),
              args=[
                Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='test_func',
                  ctx=Load()),
                Subscript(
                  value=Subscript(
                    value=Name(
                      id='word_batch',
                      ctx=Load()),
                    slice=Index(value=Str(s='the_input')),
                    ctx=Load()),
                  slice=Slice(
                    lower=Num(n=0),
                    upper=Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='num_display_words',
                      ctx=Load()),
                    step=None),
                  ctx=Load())],
              keywords=[])),
          If(
            test=Compare(
              left=Subscript(
                value=Attribute(
                  value=Subscript(
                    value=Subscript(
                      value=Name(
                        id='word_batch',
                        ctx=Load()),
                      slice=Index(value=Str(s='the_input')),
                      ctx=Load()),
                    slice=Index(value=Num(n=0)),
                    ctx=Load()),
                  attr='shape',
                  ctx=Load()),
                slice=Index(value=Num(n=0)),
                ctx=Load()),
              ops=[Lt()],
              comparators=[Num(n=256)]),
            body=[Assign(
              targets=[Name(
                id='cols',
                ctx=Store())],
              value=Num(n=2))],
            orelse=[Assign(
              targets=[Name(
                id='cols',
                ctx=Store())],
              value=Num(n=1))]),
          For(
            target=Name(
              id='i',
              ctx=Store()),
            iter=Call(
              func=Name(
                id='range',
                ctx=Load()),
              args=[Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='num_display_words',
                ctx=Load())],
              keywords=[]),
            body=[
              Expr(value=Call(
                func=Attribute(
                  value=Name(
                    id='pylab',
                    ctx=Load()),
                  attr='subplot',
                  ctx=Load()),
                args=[
                  BinOp(
                    left=Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='num_display_words',
                      ctx=Load()),
                    op=FloorDiv(),
                    right=Name(
                      id='cols',
                      ctx=Load())),
                  Name(
                    id='cols',
                    ctx=Load()),
                  BinOp(
                    left=Name(
                      id='i',
                      ctx=Load()),
                    op=Add(),
                    right=Num(n=1))],
                keywords=[])),
              If(
                test=Compare(
                  left=Call(
                    func=Attribute(
                      value=Name(
                        id='K',
                        ctx=Load()),
                      attr='image_data_format',
                      ctx=Load()),
                    args=[],
                    keywords=[]),
                  ops=[Eq()],
                  comparators=[Str(s='channels_first')]),
                body=[Assign(
                  targets=[Name(
                    id='the_input',
                    ctx=Store())],
                  value=Subscript(
                    value=Subscript(
                      value=Name(
                        id='word_batch',
                        ctx=Load()),
                      slice=Index(value=Str(s='the_input')),
                      ctx=Load()),
                    slice=ExtSlice(dims=[
                      Index(value=Name(
                        id='i',
                        ctx=Load())),
                      Index(value=Num(n=0)),
                      Slice(
                        lower=None,
                        upper=None,
                        step=None),
                      Slice(
                        lower=None,
                        upper=None,
                        step=None)]),
                    ctx=Load()))],
                orelse=[Assign(
                  targets=[Name(
                    id='the_input',
                    ctx=Store())],
                  value=Subscript(
                    value=Subscript(
                      value=Name(
                        id='word_batch',
                        ctx=Load()),
                      slice=Index(value=Str(s='the_input')),
                      ctx=Load()),
                    slice=ExtSlice(dims=[
                      Index(value=Name(
                        id='i',
                        ctx=Load())),
                      Slice(
                        lower=None,
                        upper=None,
                        step=None),
                      Slice(
                        lower=None,
                        upper=None,
                        step=None),
                      Index(value=Num(n=0))]),
                    ctx=Load()))]),
              Expr(value=Call(
                func=Attribute(
                  value=Name(
                    id='pylab',
                    ctx=Load()),
                  attr='imshow',
                  ctx=Load()),
                args=[Attribute(
                  value=Name(
                    id='the_input',
                    ctx=Load()),
                  attr='T',
                  ctx=Load())],
                keywords=[keyword(
                  arg='cmap',
                  value=Str(s='Greys_r'))])),
              Expr(value=Call(
                func=Attribute(
                  value=Name(
                    id='pylab',
                    ctx=Load()),
                  attr='xlabel',
                  ctx=Load()),
                args=[BinOp(
                  left=Str(s="Truth = '%s'\nDecoded = '%s'"),
                  op=Mod(),
                  right=Tuple(
                    elts=[
                      Subscript(
                        value=Subscript(
                          value=Name(
                            id='word_batch',
                            ctx=Load()),
                          slice=Index(value=Str(s='source_str')),
                          ctx=Load()),
                        slice=Index(value=Name(
                          id='i',
                          ctx=Load())),
                        ctx=Load()),
                      Subscript(
                        value=Name(
                          id='res',
                          ctx=Load()),
                        slice=Index(value=Name(
                          id='i',
                          ctx=Load())),
                        ctx=Load())],
                    ctx=Load()))],
                keywords=[]))],
            orelse=[]),
          Assign(
            targets=[Name(
              id='fig',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='pylab',
                  ctx=Load()),
                attr='gcf',
                ctx=Load()),
              args=[],
              keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='fig',
                ctx=Load()),
              attr='set_size_inches',
              ctx=Load()),
            args=[
              Num(n=10),
              Num(n=13)],
            keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='pylab',
                ctx=Load()),
              attr='savefig',
              ctx=Load()),
            args=[Call(
              func=Attribute(
                value=Attribute(
                  value=Name(
                    id='os',
                    ctx=Load()),
                  attr='path',
                  ctx=Load()),
                attr='join',
                ctx=Load()),
              args=[
                Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='output_dir',
                  ctx=Load()),
                BinOp(
                  left=Str(s='e%02d.png'),
                  op=Mod(),
                  right=Name(
                    id='epoch',
                    ctx=Load()))],
              keywords=[])],
            keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='pylab',
                ctx=Load()),
              attr='close',
              ctx=Load()),
            args=[],
            keywords=[]))],
        decorator_list=[],
        returns=None)],
    decorator_list=[]),
  FunctionDef(
    name='train',
    args=arguments(
      args=[
        arg(
          arg='run_name',
          annotation=None),
        arg(
          arg='start_epoch',
          annotation=None),
        arg(
          arg='stop_epoch',
          annotation=None),
        arg(
          arg='img_w',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      Assign(
        targets=[Name(
          id='img_h',
          ctx=Store())],
        value=Num(n=64)),
      Assign(
        targets=[Name(
          id='words_per_epoch',
          ctx=Store())],
        value=Num(n=16000)),
      Assign(
        targets=[Name(
          id='val_split',
          ctx=Store())],
        value=Num(n=0.2)),
      Assign(
        targets=[Name(
          id='val_words',
          ctx=Store())],
        value=Call(
          func=Name(
            id='int',
            ctx=Load()),
          args=[BinOp(
            left=Name(
              id='words_per_epoch',
              ctx=Load()),
            op=Mult(),
            right=Name(
              id='val_split',
              ctx=Load()))],
          keywords=[])),
      Assign(
        targets=[Name(
          id='conv_filters',
          ctx=Store())],
        value=Num(n=16)),
      Assign(
        targets=[Name(
          id='kernel_size',
          ctx=Store())],
        value=Tuple(
          elts=[
            Num(n=3),
            Num(n=3)],
          ctx=Load())),
      Assign(
        targets=[Name(
          id='pool_size',
          ctx=Store())],
        value=Num(n=2)),
      Assign(
        targets=[Name(
          id='time_dense_size',
          ctx=Store())],
        value=Num(n=32)),
      Assign(
        targets=[Name(
          id='rnn_size',
          ctx=Store())],
        value=Num(n=512)),
      Assign(
        targets=[Name(
          id='minibatch_size',
          ctx=Store())],
        value=Num(n=32)),
      If(
        test=Compare(
          left=Call(
            func=Attribute(
              value=Name(
                id='K',
                ctx=Load()),
              attr='image_data_format',
              ctx=Load()),
            args=[],
            keywords=[]),
          ops=[Eq()],
          comparators=[Str(s='channels_first')]),
        body=[Assign(
          targets=[Name(
            id='input_shape',
            ctx=Store())],
          value=Tuple(
            elts=[
              Num(n=1),
              Name(
                id='img_w',
                ctx=Load()),
              Name(
                id='img_h',
                ctx=Load())],
            ctx=Load()))],
        orelse=[Assign(
          targets=[Name(
            id='input_shape',
            ctx=Store())],
          value=Tuple(
            elts=[
              Name(
                id='img_w',
                ctx=Load()),
              Name(
                id='img_h',
                ctx=Load()),
              Num(n=1)],
            ctx=Load()))]),
      Assign(
        targets=[Name(
          id='fdir',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Attribute(
              value=Name(
                id='os',
                ctx=Load()),
              attr='path',
              ctx=Load()),
            attr='dirname',
            ctx=Load()),
          args=[Call(
            func=Name(
              id='get_file',
              ctx=Load()),
            args=[Str(s='wordlists.tgz')],
            keywords=[
              keyword(
                arg='origin',
                value=Str(s='http://www.mythic-ai.com/datasets/wordlists.tgz')),
              keyword(
                arg='untar',
                value=NameConstant(value=True))])],
          keywords=[])),
      Assign(
        targets=[Name(
          id='img_gen',
          ctx=Store())],
        value=Call(
          func=Name(
            id='TextImageGenerator',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='monogram_file',
              value=Call(
                func=Attribute(
                  value=Attribute(
                    value=Name(
                      id='os',
                      ctx=Load()),
                    attr='path',
                    ctx=Load()),
                  attr='join',
                  ctx=Load()),
                args=[
                  Name(
                    id='fdir',
                    ctx=Load()),
                  Str(s='wordlist_mono_clean.txt')],
                keywords=[])),
            keyword(
              arg='bigram_file',
              value=Call(
                func=Attribute(
                  value=Attribute(
                    value=Name(
                      id='os',
                      ctx=Load()),
                    attr='path',
                    ctx=Load()),
                  attr='join',
                  ctx=Load()),
                args=[
                  Name(
                    id='fdir',
                    ctx=Load()),
                  Str(s='wordlist_bi_clean.txt')],
                keywords=[])),
            keyword(
              arg='minibatch_size',
              value=Name(
                id='minibatch_size',
                ctx=Load())),
            keyword(
              arg='img_w',
              value=Name(
                id='img_w',
                ctx=Load())),
            keyword(
              arg='img_h',
              value=Name(
                id='img_h',
                ctx=Load())),
            keyword(
              arg='downsample_factor',
              value=BinOp(
                left=Name(
                  id='pool_size',
                  ctx=Load()),
                op=Pow(),
                right=Num(n=2))),
            keyword(
              arg='val_split',
              value=BinOp(
                left=Name(
                  id='words_per_epoch',
                  ctx=Load()),
                op=Sub(),
                right=Name(
                  id='val_words',
                  ctx=Load())))])),
      Assign(
        targets=[Name(
          id='act',
          ctx=Store())],
        value=Str(s='relu')),
      Assign(
        targets=[Name(
          id='input_data',
          ctx=Store())],
        value=Call(
          func=Name(
            id='Input',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='name',
              value=Str(s='the_input')),
            keyword(
              arg='shape',
              value=Name(
                id='input_shape',
                ctx=Load())),
            keyword(
              arg='dtype',
              value=Str(s='float32'))])),
      Assign(
        targets=[Name(
          id='inner',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='Conv2D',
              ctx=Load()),
            args=[
              Name(
                id='conv_filters',
                ctx=Load()),
              Name(
                id='kernel_size',
                ctx=Load())],
            keywords=[
              keyword(
                arg='padding',
                value=Str(s='same')),
              keyword(
                arg='activation',
                value=Name(
                  id='act',
                  ctx=Load())),
              keyword(
                arg='kernel_initializer',
                value=Str(s='he_normal')),
              keyword(
                arg='name',
                value=Str(s='conv1'))]),
          args=[Name(
            id='input_data',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='inner',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='MaxPooling2D',
              ctx=Load()),
            args=[],
            keywords=[
              keyword(
                arg='pool_size',
                value=Tuple(
                  elts=[
                    Name(
                      id='pool_size',
                      ctx=Load()),
                    Name(
                      id='pool_size',
                      ctx=Load())],
                  ctx=Load())),
              keyword(
                arg='name',
                value=Str(s='max1'))]),
          args=[Name(
            id='inner',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='inner',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='Conv2D',
              ctx=Load()),
            args=[
              Name(
                id='conv_filters',
                ctx=Load()),
              Name(
                id='kernel_size',
                ctx=Load())],
            keywords=[
              keyword(
                arg='padding',
                value=Str(s='same')),
              keyword(
                arg='activation',
                value=Name(
                  id='act',
                  ctx=Load())),
              keyword(
                arg='kernel_initializer',
                value=Str(s='he_normal')),
              keyword(
                arg='name',
                value=Str(s='conv2'))]),
          args=[Name(
            id='inner',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='inner',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='MaxPooling2D',
              ctx=Load()),
            args=[],
            keywords=[
              keyword(
                arg='pool_size',
                value=Tuple(
                  elts=[
                    Name(
                      id='pool_size',
                      ctx=Load()),
                    Name(
                      id='pool_size',
                      ctx=Load())],
                  ctx=Load())),
              keyword(
                arg='name',
                value=Str(s='max2'))]),
          args=[Name(
            id='inner',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='conv_to_rnn_dims',
          ctx=Store())],
        value=Tuple(
          elts=[
            BinOp(
              left=Name(
                id='img_w',
                ctx=Load()),
              op=FloorDiv(),
              right=BinOp(
                left=Name(
                  id='pool_size',
                  ctx=Load()),
                op=Pow(),
                right=Num(n=2))),
            BinOp(
              left=BinOp(
                left=Name(
                  id='img_h',
                  ctx=Load()),
                op=FloorDiv(),
                right=BinOp(
                  left=Name(
                    id='pool_size',
                    ctx=Load()),
                  op=Pow(),
                  right=Num(n=2))),
              op=Mult(),
              right=Name(
                id='conv_filters',
                ctx=Load()))],
          ctx=Load())),
      Assign(
        targets=[Name(
          id='inner',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='Reshape',
              ctx=Load()),
            args=[],
            keywords=[
              keyword(
                arg='target_shape',
                value=Name(
                  id='conv_to_rnn_dims',
                  ctx=Load())),
              keyword(
                arg='name',
                value=Str(s='reshape'))]),
          args=[Name(
            id='inner',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='inner',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='Dense',
              ctx=Load()),
            args=[Name(
              id='time_dense_size',
              ctx=Load())],
            keywords=[
              keyword(
                arg='activation',
                value=Name(
                  id='act',
                  ctx=Load())),
              keyword(
                arg='name',
                value=Str(s='dense1'))]),
          args=[Name(
            id='inner',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='gru_1',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='GRU',
              ctx=Load()),
            args=[Name(
              id='rnn_size',
              ctx=Load())],
            keywords=[
              keyword(
                arg='return_sequences',
                value=NameConstant(value=True)),
              keyword(
                arg='kernel_initializer',
                value=Str(s='he_normal')),
              keyword(
                arg='name',
                value=Str(s='gru1'))]),
          args=[Name(
            id='inner',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='gru_1b',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='GRU',
              ctx=Load()),
            args=[Name(
              id='rnn_size',
              ctx=Load())],
            keywords=[
              keyword(
                arg='return_sequences',
                value=NameConstant(value=True)),
              keyword(
                arg='go_backwards',
                value=NameConstant(value=True)),
              keyword(
                arg='kernel_initializer',
                value=Str(s='he_normal')),
              keyword(
                arg='name',
                value=Str(s='gru1_b'))]),
          args=[Name(
            id='inner',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='gru1_merged',
          ctx=Store())],
        value=Call(
          func=Name(
            id='add',
            ctx=Load()),
          args=[List(
            elts=[
              Name(
                id='gru_1',
                ctx=Load()),
              Name(
                id='gru_1b',
                ctx=Load())],
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='gru_2',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='GRU',
              ctx=Load()),
            args=[Name(
              id='rnn_size',
              ctx=Load())],
            keywords=[
              keyword(
                arg='return_sequences',
                value=NameConstant(value=True)),
              keyword(
                arg='kernel_initializer',
                value=Str(s='he_normal')),
              keyword(
                arg='name',
                value=Str(s='gru2'))]),
          args=[Name(
            id='gru1_merged',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='gru_2b',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='GRU',
              ctx=Load()),
            args=[Name(
              id='rnn_size',
              ctx=Load())],
            keywords=[
              keyword(
                arg='return_sequences',
                value=NameConstant(value=True)),
              keyword(
                arg='go_backwards',
                value=NameConstant(value=True)),
              keyword(
                arg='kernel_initializer',
                value=Str(s='he_normal')),
              keyword(
                arg='name',
                value=Str(s='gru2_b'))]),
          args=[Name(
            id='gru1_merged',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='inner',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='Dense',
              ctx=Load()),
            args=[Call(
              func=Attribute(
                value=Name(
                  id='img_gen',
                  ctx=Load()),
                attr='get_output_size',
                ctx=Load()),
              args=[],
              keywords=[])],
            keywords=[
              keyword(
                arg='kernel_initializer',
                value=Str(s='he_normal')),
              keyword(
                arg='name',
                value=Str(s='dense2'))]),
          args=[Call(
            func=Name(
              id='concatenate',
              ctx=Load()),
            args=[List(
              elts=[
                Name(
                  id='gru_2',
                  ctx=Load()),
                Name(
                  id='gru_2b',
                  ctx=Load())],
              ctx=Load())],
            keywords=[])],
          keywords=[])),
      Assign(
        targets=[Name(
          id='y_pred',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='Activation',
              ctx=Load()),
            args=[Str(s='softmax')],
            keywords=[keyword(
              arg='name',
              value=Str(s='softmax'))]),
          args=[Name(
            id='inner',
            ctx=Load())],
          keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Call(
            func=Name(
              id='Model',
              ctx=Load()),
            args=[],
            keywords=[
              keyword(
                arg='inputs',
                value=Name(
                  id='input_data',
                  ctx=Load())),
              keyword(
                arg='outputs',
                value=Name(
                  id='y_pred',
                  ctx=Load()))]),
          attr='summary',
          ctx=Load()),
        args=[],
        keywords=[])),
      Assign(
        targets=[Name(
          id='labels',
          ctx=Store())],
        value=Call(
          func=Name(
            id='Input',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='name',
              value=Str(s='the_labels')),
            keyword(
              arg='shape',
              value=List(
                elts=[Attribute(
                  value=Name(
                    id='img_gen',
                    ctx=Load()),
                  attr='absolute_max_string_len',
                  ctx=Load())],
                ctx=Load())),
            keyword(
              arg='dtype',
              value=Str(s='float32'))])),
      Assign(
        targets=[Name(
          id='input_length',
          ctx=Store())],
        value=Call(
          func=Name(
            id='Input',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='name',
              value=Str(s='input_length')),
            keyword(
              arg='shape',
              value=List(
                elts=[Num(n=1)],
                ctx=Load())),
            keyword(
              arg='dtype',
              value=Str(s='int64'))])),
      Assign(
        targets=[Name(
          id='label_length',
          ctx=Store())],
        value=Call(
          func=Name(
            id='Input',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='name',
              value=Str(s='label_length')),
            keyword(
              arg='shape',
              value=List(
                elts=[Num(n=1)],
                ctx=Load())),
            keyword(
              arg='dtype',
              value=Str(s='int64'))])),
      Assign(
        targets=[Name(
          id='loss_out',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='Lambda',
              ctx=Load()),
            args=[Name(
              id='ctc_lambda_func',
              ctx=Load())],
            keywords=[
              keyword(
                arg='output_shape',
                value=Tuple(
                  elts=[Num(n=1)],
                  ctx=Load())),
              keyword(
                arg='name',
                value=Str(s='ctc'))]),
          args=[List(
            elts=[
              Name(
                id='y_pred',
                ctx=Load()),
              Name(
                id='labels',
                ctx=Load()),
              Name(
                id='input_length',
                ctx=Load()),
              Name(
                id='label_length',
                ctx=Load())],
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='sgd',
          ctx=Store())],
        value=Call(
          func=Name(
            id='SGD',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='learning_rate',
              value=Num(n=0.02)),
            keyword(
              arg='decay',
              value=Num(n=1e-06)),
            keyword(
              arg='momentum',
              value=Num(n=0.9)),
            keyword(
              arg='nesterov',
              value=NameConstant(value=True))])),
      Assign(
        targets=[Name(
          id='model',
          ctx=Store())],
        value=Call(
          func=Name(
            id='Model',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='inputs',
              value=List(
                elts=[
                  Name(
                    id='input_data',
                    ctx=Load()),
                  Name(
                    id='labels',
                    ctx=Load()),
                  Name(
                    id='input_length',
                    ctx=Load()),
                  Name(
                    id='label_length',
                    ctx=Load())],
                ctx=Load())),
            keyword(
              arg='outputs',
              value=Name(
                id='loss_out',
                ctx=Load()))])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='model',
            ctx=Load()),
          attr='compile',
          ctx=Load()),
        args=[],
        keywords=[
          keyword(
            arg='loss',
            value=Dict(
              keys=[Str(s='ctc')],
              values=[Lambda(
                args=arguments(
                  args=[
                    arg(
                      arg='y_true',
                      annotation=None),
                    arg(
                      arg='y_pred',
                      annotation=None)],
                  vararg=None,
                  kwonlyargs=[],
                  kw_defaults=[],
                  kwarg=None,
                  defaults=[]),
                body=Name(
                  id='y_pred',
                  ctx=Load()))])),
          keyword(
            arg='optimizer',
            value=Name(
              id='sgd',
              ctx=Load()))])),
      If(
        test=Compare(
          left=Name(
            id='start_epoch',
            ctx=Load()),
          ops=[Gt()],
          comparators=[Num(n=0)]),
        body=[
          Assign(
            targets=[Name(
              id='weight_file',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Attribute(
                  value=Name(
                    id='os',
                    ctx=Load()),
                  attr='path',
                  ctx=Load()),
                attr='join',
                ctx=Load()),
              args=[
                Name(
                  id='OUTPUT_DIR',
                  ctx=Load()),
                Call(
                  func=Attribute(
                    value=Attribute(
                      value=Name(
                        id='os',
                        ctx=Load()),
                      attr='path',
                      ctx=Load()),
                    attr='join',
                    ctx=Load()),
                  args=[
                    Name(
                      id='run_name',
                      ctx=Load()),
                    BinOp(
                      left=Str(s='weights%02d.h5'),
                      op=Mod(),
                      right=BinOp(
                        left=Name(
                          id='start_epoch',
                          ctx=Load()),
                        op=Sub(),
                        right=Num(n=1)))],
                  keywords=[])],
              keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='model',
                ctx=Load()),
              attr='load_weights',
              ctx=Load()),
            args=[Name(
              id='weight_file',
              ctx=Load())],
            keywords=[]))],
        orelse=[]),
      Assign(
        targets=[Name(
          id='test_func',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='K',
              ctx=Load()),
            attr='function',
            ctx=Load()),
          args=[
            List(
              elts=[Name(
                id='input_data',
                ctx=Load())],
              ctx=Load()),
            List(
              elts=[Name(
                id='y_pred',
                ctx=Load())],
              ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='viz_cb',
          ctx=Store())],
        value=Call(
          func=Name(
            id='VizCallback',
            ctx=Load()),
          args=[
            Name(
              id='run_name',
              ctx=Load()),
            Name(
              id='test_func',
              ctx=Load()),
            Call(
              func=Attribute(
                value=Name(
                  id='img_gen',
                  ctx=Load()),
                attr='next_val',
                ctx=Load()),
              args=[],
              keywords=[])],
          keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='model',
            ctx=Load()),
          attr='fit_generator',
          ctx=Load()),
        args=[],
        keywords=[
          keyword(
            arg='generator',
            value=Call(
              func=Attribute(
                value=Name(
                  id='img_gen',
                  ctx=Load()),
                attr='next_train',
                ctx=Load()),
              args=[],
              keywords=[])),
          keyword(
            arg='steps_per_epoch',
            value=BinOp(
              left=BinOp(
                left=Name(
                  id='words_per_epoch',
                  ctx=Load()),
                op=Sub(),
                right=Name(
                  id='val_words',
                  ctx=Load())),
              op=FloorDiv(),
              right=Name(
                id='minibatch_size',
                ctx=Load()))),
          keyword(
            arg='epochs',
            value=Name(
              id='stop_epoch',
              ctx=Load())),
          keyword(
            arg='validation_data',
            value=Call(
              func=Attribute(
                value=Name(
                  id='img_gen',
                  ctx=Load()),
                attr='next_val',
                ctx=Load()),
              args=[],
              keywords=[])),
          keyword(
            arg='validation_steps',
            value=BinOp(
              left=Name(
                id='val_words',
                ctx=Load()),
              op=FloorDiv(),
              right=Name(
                id='minibatch_size',
                ctx=Load()))),
          keyword(
            arg='callbacks',
            value=List(
              elts=[
                Name(
                  id='viz_cb',
                  ctx=Load()),
                Name(
                  id='img_gen',
                  ctx=Load())],
              ctx=Load())),
          keyword(
            arg='initial_epoch',
            value=Name(
              id='start_epoch',
              ctx=Load()))]))],
    decorator_list=[],
    returns=None),
  If(
    test=Compare(
      left=Name(
        id='__name__',
        ctx=Load()),
      ops=[Eq()],
      comparators=[Str(s='__main__')]),
    body=[
      Assign(
        targets=[Name(
          id='run_name',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Call(
              func=Attribute(
                value=Attribute(
                  value=Name(
                    id='datetime',
                    ctx=Load()),
                  attr='datetime',
                  ctx=Load()),
                attr='now',
                ctx=Load()),
              args=[],
              keywords=[]),
            attr='strftime',
            ctx=Load()),
          args=[Str(s='%Y:%m:%d:%H:%M:%S')],
          keywords=[])),
      Expr(value=Call(
        func=Name(
          id='train',
          ctx=Load()),
        args=[
          Name(
            id='run_name',
            ctx=Load()),
          Num(n=0),
          Num(n=20),
          Num(n=128)],
        keywords=[])),
      Expr(value=Call(
        func=Name(
          id='train',
          ctx=Load()),
        args=[
          Name(
            id='run_name',
            ctx=Load()),
          Num(n=20),
          Num(n=25),
          Num(n=512)],
        keywords=[]))],
    orelse=[])])