Module(body=[
  Expr(value=Str(s="\n#This example demonstrates the use of fasttext for text classification\n\nBased on Joulin et al's paper:\n\n[Bags of Tricks for Efficient Text Classification\n](https://arxiv.org/abs/1607.01759)\n\nResults on IMDB datasets with uni and bi-gram embeddings:\n\nEmbedding|Accuracy, 5 epochs|Speed (s/epoch)|Hardware\n:--------|-----------------:|----:|:-------\nUni-gram |            0.8813|    8|i7 CPU\nBi-gram  |            0.9056|    2|GTx 980M GPU\n\n")),
  ImportFrom(
    module='__future__',
    names=[alias(
      name='print_function',
      asname=None)],
    level=0),
  Import(names=[alias(
    name='numpy',
    asname='np')]),
  ImportFrom(
    module='keras.preprocessing',
    names=[alias(
      name='sequence',
      asname=None)],
    level=0),
  ImportFrom(
    module='keras.models',
    names=[alias(
      name='Sequential',
      asname=None)],
    level=0),
  ImportFrom(
    module='keras.layers',
    names=[alias(
      name='Dense',
      asname=None)],
    level=0),
  ImportFrom(
    module='keras.layers',
    names=[alias(
      name='Embedding',
      asname=None)],
    level=0),
  ImportFrom(
    module='keras.layers',
    names=[alias(
      name='GlobalAveragePooling1D',
      asname=None)],
    level=0),
  ImportFrom(
    module='keras.datasets',
    names=[alias(
      name='imdb',
      asname=None)],
    level=0),
  FunctionDef(
    name='create_ngram_set',
    args=arguments(
      args=[
        arg(
          arg='input_list',
          annotation=None),
        arg(
          arg='ngram_value',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[Num(n=2)]),
    body=[
      Expr(value=Str(s='\n    Extract a set of n-grams from a list of integers.\n\n    >>> create_ngram_set([1, 4, 9, 4, 1, 4], ngram_value=2)\n    {(4, 9), (4, 1), (1, 4), (9, 4)}\n\n    >>> create_ngram_set([1, 4, 9, 4, 1, 4], ngram_value=3)\n    [(1, 4, 9), (4, 9, 4), (9, 4, 1), (4, 1, 4)]\n    ')),
      Return(value=Call(
        func=Name(
          id='set',
          ctx=Load()),
        args=[Call(
          func=Name(
            id='zip',
            ctx=Load()),
          args=[Starred(
            value=ListComp(
              elt=Subscript(
                value=Name(
                  id='input_list',
                  ctx=Load()),
                slice=Slice(
                  lower=Name(
                    id='i',
                    ctx=Load()),
                  upper=None,
                  step=None),
                ctx=Load()),
              generators=[comprehension(
                target=Name(
                  id='i',
                  ctx=Store()),
                iter=Call(
                  func=Name(
                    id='range',
                    ctx=Load()),
                  args=[Name(
                    id='ngram_value',
                    ctx=Load())],
                  keywords=[]),
                ifs=[],
                is_async=0)]),
            ctx=Load())],
          keywords=[])],
        keywords=[]))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='add_ngram',
    args=arguments(
      args=[
        arg(
          arg='sequences',
          annotation=None),
        arg(
          arg='token_indice',
          annotation=None),
        arg(
          arg='ngram_range',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[Num(n=2)]),
    body=[
      Expr(value=Str(s='\n    Augment the input list of list (sequences) by appending n-grams values.\n\n    Example: adding bi-gram\n    >>> sequences = [[1, 3, 4, 5], [1, 3, 7, 9, 2]]\n    >>> token_indice = {(1, 3): 1337, (9, 2): 42, (4, 5): 2017}\n    >>> add_ngram(sequences, token_indice, ngram_range=2)\n    [[1, 3, 4, 5, 1337, 2017], [1, 3, 7, 9, 2, 1337, 42]]\n\n    Example: adding tri-gram\n    >>> sequences = [[1, 3, 4, 5], [1, 3, 7, 9, 2]]\n    >>> token_indice = {(1, 3): 1337, (9, 2): 42, (4, 5): 2017, (7, 9, 2): 2018}\n    >>> add_ngram(sequences, token_indice, ngram_range=3)\n    [[1, 3, 4, 5, 1337, 2017], [1, 3, 7, 9, 2, 1337, 42, 2018]]\n    ')),
      Assign(
        targets=[Name(
          id='new_sequences',
          ctx=Store())],
        value=List(
          elts=[],
          ctx=Load())),
      For(
        target=Name(
          id='input_list',
          ctx=Store()),
        iter=Name(
          id='sequences',
          ctx=Load()),
        body=[
          Assign(
            targets=[Name(
              id='new_list',
              ctx=Store())],
            value=Subscript(
              value=Name(
                id='input_list',
                ctx=Load()),
              slice=Slice(
                lower=None,
                upper=None,
                step=None),
              ctx=Load())),
          For(
            target=Name(
              id='ngram_value',
              ctx=Store()),
            iter=Call(
              func=Name(
                id='range',
                ctx=Load()),
              args=[
                Num(n=2),
                BinOp(
                  left=Name(
                    id='ngram_range',
                    ctx=Load()),
                  op=Add(),
                  right=Num(n=1))],
              keywords=[]),
            body=[For(
              target=Name(
                id='i',
                ctx=Store()),
              iter=Call(
                func=Name(
                  id='range',
                  ctx=Load()),
                args=[BinOp(
                  left=BinOp(
                    left=Call(
                      func=Name(
                        id='len',
                        ctx=Load()),
                      args=[Name(
                        id='new_list',
                        ctx=Load())],
                      keywords=[]),
                    op=Sub(),
                    right=Name(
                      id='ngram_value',
                      ctx=Load())),
                  op=Add(),
                  right=Num(n=1))],
                keywords=[]),
              body=[
                Assign(
                  targets=[Name(
                    id='ngram',
                    ctx=Store())],
                  value=Call(
                    func=Name(
                      id='tuple',
                      ctx=Load()),
                    args=[Subscript(
                      value=Name(
                        id='new_list',
                        ctx=Load()),
                      slice=Slice(
                        lower=Name(
                          id='i',
                          ctx=Load()),
                        upper=BinOp(
                          left=Name(
                            id='i',
                            ctx=Load()),
                          op=Add(),
                          right=Name(
                            id='ngram_value',
                            ctx=Load())),
                        step=None),
                      ctx=Load())],
                    keywords=[])),
                If(
                  test=Compare(
                    left=Name(
                      id='ngram',
                      ctx=Load()),
                    ops=[In()],
                    comparators=[Name(
                      id='token_indice',
                      ctx=Load())]),
                  body=[Expr(value=Call(
                    func=Attribute(
                      value=Name(
                        id='new_list',
                        ctx=Load()),
                      attr='append',
                      ctx=Load()),
                    args=[Subscript(
                      value=Name(
                        id='token_indice',
                        ctx=Load()),
                      slice=Index(value=Name(
                        id='ngram',
                        ctx=Load())),
                      ctx=Load())],
                    keywords=[]))],
                  orelse=[])],
              orelse=[])],
            orelse=[]),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='new_sequences',
                ctx=Load()),
              attr='append',
              ctx=Load()),
            args=[Name(
              id='new_list',
              ctx=Load())],
            keywords=[]))],
        orelse=[]),
      Return(value=Name(
        id='new_sequences',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  Assign(
    targets=[Name(
      id='ngram_range',
      ctx=Store())],
    value=Num(n=1)),
  Assign(
    targets=[Name(
      id='max_features',
      ctx=Store())],
    value=Num(n=20000)),
  Assign(
    targets=[Name(
      id='maxlen',
      ctx=Store())],
    value=Num(n=400)),
  Assign(
    targets=[Name(
      id='batch_size',
      ctx=Store())],
    value=Num(n=32)),
  Assign(
    targets=[Name(
      id='embedding_dims',
      ctx=Store())],
    value=Num(n=50)),
  Assign(
    targets=[Name(
      id='epochs',
      ctx=Store())],
    value=Num(n=5)),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Loading data...')],
    keywords=[])),
  Assign(
    targets=[Tuple(
      elts=[
        Tuple(
          elts=[
            Name(
              id='x_train',
              ctx=Store()),
            Name(
              id='y_train',
              ctx=Store())],
          ctx=Store()),
        Tuple(
          elts=[
            Name(
              id='x_test',
              ctx=Store()),
            Name(
              id='y_test',
              ctx=Store())],
          ctx=Store())],
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='imdb',
          ctx=Load()),
        attr='load_data',
        ctx=Load()),
      args=[],
      keywords=[keyword(
        arg='num_words',
        value=Name(
          id='max_features',
          ctx=Load()))])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Call(
        func=Name(
          id='len',
          ctx=Load()),
        args=[Name(
          id='x_train',
          ctx=Load())],
        keywords=[]),
      Str(s='train sequences')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Call(
        func=Name(
          id='len',
          ctx=Load()),
        args=[Name(
          id='x_test',
          ctx=Load())],
        keywords=[]),
      Str(s='test sequences')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Str(s='Average train sequence length: {}'),
        attr='format',
        ctx=Load()),
      args=[Call(
        func=Attribute(
          value=Name(
            id='np',
            ctx=Load()),
          attr='mean',
          ctx=Load()),
        args=[Call(
          func=Name(
            id='list',
            ctx=Load()),
          args=[Call(
            func=Name(
              id='map',
              ctx=Load()),
            args=[
              Name(
                id='len',
                ctx=Load()),
              Name(
                id='x_train',
                ctx=Load())],
            keywords=[])],
          keywords=[])],
        keywords=[keyword(
          arg='dtype',
          value=Name(
            id='int',
            ctx=Load()))])],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Str(s='Average test sequence length: {}'),
        attr='format',
        ctx=Load()),
      args=[Call(
        func=Attribute(
          value=Name(
            id='np',
            ctx=Load()),
          attr='mean',
          ctx=Load()),
        args=[Call(
          func=Name(
            id='list',
            ctx=Load()),
          args=[Call(
            func=Name(
              id='map',
              ctx=Load()),
            args=[
              Name(
                id='len',
                ctx=Load()),
              Name(
                id='x_test',
                ctx=Load())],
            keywords=[])],
          keywords=[])],
        keywords=[keyword(
          arg='dtype',
          value=Name(
            id='int',
            ctx=Load()))])],
      keywords=[])],
    keywords=[])),
  If(
    test=Compare(
      left=Name(
        id='ngram_range',
        ctx=Load()),
      ops=[Gt()],
      comparators=[Num(n=1)]),
    body=[
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[Call(
          func=Attribute(
            value=Str(s='Adding {}-gram features'),
            attr='format',
            ctx=Load()),
          args=[Name(
            id='ngram_range',
            ctx=Load())],
          keywords=[])],
        keywords=[])),
      Assign(
        targets=[Name(
          id='ngram_set',
          ctx=Store())],
        value=Call(
          func=Name(
            id='set',
            ctx=Load()),
          args=[],
          keywords=[])),
      For(
        target=Name(
          id='input_list',
          ctx=Store()),
        iter=Name(
          id='x_train',
          ctx=Load()),
        body=[For(
          target=Name(
            id='i',
            ctx=Store()),
          iter=Call(
            func=Name(
              id='range',
              ctx=Load()),
            args=[
              Num(n=2),
              BinOp(
                left=Name(
                  id='ngram_range',
                  ctx=Load()),
                op=Add(),
                right=Num(n=1))],
            keywords=[]),
          body=[
            Assign(
              targets=[Name(
                id='set_of_ngram',
                ctx=Store())],
              value=Call(
                func=Name(
                  id='create_ngram_set',
                  ctx=Load()),
                args=[Name(
                  id='input_list',
                  ctx=Load())],
                keywords=[keyword(
                  arg='ngram_value',
                  value=Name(
                    id='i',
                    ctx=Load()))])),
            Expr(value=Call(
              func=Attribute(
                value=Name(
                  id='ngram_set',
                  ctx=Load()),
                attr='update',
                ctx=Load()),
              args=[Name(
                id='set_of_ngram',
                ctx=Load())],
              keywords=[]))],
          orelse=[])],
        orelse=[]),
      Assign(
        targets=[Name(
          id='start_index',
          ctx=Store())],
        value=BinOp(
          left=Name(
            id='max_features',
            ctx=Load()),
          op=Add(),
          right=Num(n=1))),
      Assign(
        targets=[Name(
          id='token_indice',
          ctx=Store())],
        value=DictComp(
          key=Name(
            id='v',
            ctx=Load()),
          value=BinOp(
            left=Name(
              id='k',
              ctx=Load()),
            op=Add(),
            right=Name(
              id='start_index',
              ctx=Load())),
          generators=[comprehension(
            target=Tuple(
              elts=[
                Name(
                  id='k',
                  ctx=Store()),
                Name(
                  id='v',
                  ctx=Store())],
              ctx=Store()),
            iter=Call(
              func=Name(
                id='enumerate',
                ctx=Load()),
              args=[Name(
                id='ngram_set',
                ctx=Load())],
              keywords=[]),
            ifs=[],
            is_async=0)])),
      Assign(
        targets=[Name(
          id='indice_token',
          ctx=Store())],
        value=DictComp(
          key=Subscript(
            value=Name(
              id='token_indice',
              ctx=Load()),
            slice=Index(value=Name(
              id='k',
              ctx=Load())),
            ctx=Load()),
          value=Name(
            id='k',
            ctx=Load()),
          generators=[comprehension(
            target=Name(
              id='k',
              ctx=Store()),
            iter=Name(
              id='token_indice',
              ctx=Load()),
            ifs=[],
            is_async=0)])),
      Assign(
        targets=[Name(
          id='max_features',
          ctx=Store())],
        value=BinOp(
          left=Call(
            func=Attribute(
              value=Name(
                id='np',
                ctx=Load()),
              attr='max',
              ctx=Load()),
            args=[Call(
              func=Name(
                id='list',
                ctx=Load()),
              args=[Call(
                func=Attribute(
                  value=Name(
                    id='indice_token',
                    ctx=Load()),
                  attr='keys',
                  ctx=Load()),
                args=[],
                keywords=[])],
              keywords=[])],
            keywords=[]),
          op=Add(),
          right=Num(n=1))),
      Assign(
        targets=[Name(
          id='x_train',
          ctx=Store())],
        value=Call(
          func=Name(
            id='add_ngram',
            ctx=Load()),
          args=[
            Name(
              id='x_train',
              ctx=Load()),
            Name(
              id='token_indice',
              ctx=Load()),
            Name(
              id='ngram_range',
              ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='x_test',
          ctx=Store())],
        value=Call(
          func=Name(
            id='add_ngram',
            ctx=Load()),
          args=[
            Name(
              id='x_test',
              ctx=Load()),
            Name(
              id='token_indice',
              ctx=Load()),
            Name(
              id='ngram_range',
              ctx=Load())],
          keywords=[])),
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[Call(
          func=Attribute(
            value=Str(s='Average train sequence length: {}'),
            attr='format',
            ctx=Load()),
          args=[Call(
            func=Attribute(
              value=Name(
                id='np',
                ctx=Load()),
              attr='mean',
              ctx=Load()),
            args=[Call(
              func=Name(
                id='list',
                ctx=Load()),
              args=[Call(
                func=Name(
                  id='map',
                  ctx=Load()),
                args=[
                  Name(
                    id='len',
                    ctx=Load()),
                  Name(
                    id='x_train',
                    ctx=Load())],
                keywords=[])],
              keywords=[])],
            keywords=[keyword(
              arg='dtype',
              value=Name(
                id='int',
                ctx=Load()))])],
          keywords=[])],
        keywords=[])),
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[Call(
          func=Attribute(
            value=Str(s='Average test sequence length: {}'),
            attr='format',
            ctx=Load()),
          args=[Call(
            func=Attribute(
              value=Name(
                id='np',
                ctx=Load()),
              attr='mean',
              ctx=Load()),
            args=[Call(
              func=Name(
                id='list',
                ctx=Load()),
              args=[Call(
                func=Name(
                  id='map',
                  ctx=Load()),
                args=[
                  Name(
                    id='len',
                    ctx=Load()),
                  Name(
                    id='x_test',
                    ctx=Load())],
                keywords=[])],
              keywords=[])],
            keywords=[keyword(
              arg='dtype',
              value=Name(
                id='int',
                ctx=Load()))])],
          keywords=[])],
        keywords=[]))],
    orelse=[]),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Pad sequences (samples x time)')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='x_train',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='sequence',
          ctx=Load()),
        attr='pad_sequences',
        ctx=Load()),
      args=[Name(
        id='x_train',
        ctx=Load())],
      keywords=[keyword(
        arg='maxlen',
        value=Name(
          id='maxlen',
          ctx=Load()))])),
  Assign(
    targets=[Name(
      id='x_test',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='sequence',
          ctx=Load()),
        attr='pad_sequences',
        ctx=Load()),
      args=[Name(
        id='x_test',
        ctx=Load())],
      keywords=[keyword(
        arg='maxlen',
        value=Name(
          id='maxlen',
          ctx=Load()))])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='x_train shape:'),
      Attribute(
        value=Name(
          id='x_train',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='x_test shape:'),
      Attribute(
        value=Name(
          id='x_test',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Build model...')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='model',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Sequential',
        ctx=Load()),
      args=[],
      keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Embedding',
        ctx=Load()),
      args=[
        Name(
          id='max_features',
          ctx=Load()),
        Name(
          id='embedding_dims',
          ctx=Load())],
      keywords=[keyword(
        arg='input_length',
        value=Name(
          id='maxlen',
          ctx=Load()))])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='GlobalAveragePooling1D',
        ctx=Load()),
      args=[],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Dense',
        ctx=Load()),
      args=[Num(n=1)],
      keywords=[keyword(
        arg='activation',
        value=Str(s='sigmoid'))])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='compile',
      ctx=Load()),
    args=[],
    keywords=[
      keyword(
        arg='loss',
        value=Str(s='binary_crossentropy')),
      keyword(
        arg='optimizer',
        value=Str(s='adam')),
      keyword(
        arg='metrics',
        value=List(
          elts=[Str(s='accuracy')],
          ctx=Load()))])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='fit',
      ctx=Load()),
    args=[
      Name(
        id='x_train',
        ctx=Load()),
      Name(
        id='y_train',
        ctx=Load())],
    keywords=[
      keyword(
        arg='batch_size',
        value=Name(
          id='batch_size',
          ctx=Load())),
      keyword(
        arg='epochs',
        value=Name(
          id='epochs',
          ctx=Load())),
      keyword(
        arg='validation_data',
        value=Tuple(
          elts=[
            Name(
              id='x_test',
              ctx=Load()),
            Name(
              id='y_test',
              ctx=Load())],
          ctx=Load()))]))])