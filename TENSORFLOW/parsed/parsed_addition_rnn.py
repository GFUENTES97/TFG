Module(body=[
  ImportFrom(
    module='__future__',
    names=[alias(
      name='print_function',
      asname=None)],
    level=0),
  ImportFrom(
    module='keras.models',
    names=[alias(
      name='Sequential',
      asname=None)],
    level=0),
  ImportFrom(
    module='keras',
    names=[alias(
      name='layers',
      asname=None)],
    level=0),
  Import(names=[alias(
    name='numpy',
    asname='np')]),
  ImportFrom(
    module='six.moves',
    names=[alias(
      name='range',
      asname=None)],
    level=0),
  ClassDef(
    name='CharacterTable',
    bases=[Name(
      id='object',
      ctx=Load())],
    keywords=[],
    body=[
      FunctionDef(
        name='__init__',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='chars',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='chars',
              ctx=Store())],
            value=Call(
              func=Name(
                id='sorted',
                ctx=Load()),
              args=[Call(
                func=Name(
                  id='set',
                  ctx=Load()),
                args=[Name(
                  id='chars',
                  ctx=Load())],
                keywords=[])],
              keywords=[])),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='char_indices',
              ctx=Store())],
            value=Call(
              func=Name(
                id='dict',
                ctx=Load()),
              args=[GeneratorExp(
                elt=Tuple(
                  elts=[
                    Name(
                      id='c',
                      ctx=Load()),
                    Name(
                      id='i',
                      ctx=Load())],
                  ctx=Load()),
                generators=[comprehension(
                  target=Tuple(
                    elts=[
                      Name(
                        id='i',
                        ctx=Store()),
                      Name(
                        id='c',
                        ctx=Store())],
                    ctx=Store()),
                  iter=Call(
                    func=Name(
                      id='enumerate',
                      ctx=Load()),
                    args=[Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='chars',
                      ctx=Load())],
                    keywords=[]),
                  ifs=[],
                  is_async=0)])],
              keywords=[])),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='indices_char',
              ctx=Store())],
            value=Call(
              func=Name(
                id='dict',
                ctx=Load()),
              args=[GeneratorExp(
                elt=Tuple(
                  elts=[
                    Name(
                      id='i',
                      ctx=Load()),
                    Name(
                      id='c',
                      ctx=Load())],
                  ctx=Load()),
                generators=[comprehension(
                  target=Tuple(
                    elts=[
                      Name(
                        id='i',
                        ctx=Store()),
                      Name(
                        id='c',
                        ctx=Store())],
                    ctx=Store()),
                  iter=Call(
                    func=Name(
                      id='enumerate',
                      ctx=Load()),
                    args=[Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='chars',
                      ctx=Load())],
                    keywords=[]),
                  ifs=[],
                  is_async=0)])],
              keywords=[]))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='encode',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='C',
              annotation=None),
            arg(
              arg='num_rows',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[
          Assign(
            targets=[Name(
              id='x',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='np',
                  ctx=Load()),
                attr='zeros',
                ctx=Load()),
              args=[Tuple(
                elts=[
                  Name(
                    id='num_rows',
                    ctx=Load()),
                  Call(
                    func=Name(
                      id='len',
                      ctx=Load()),
                    args=[Attribute(
                      value=Name(
                        id='self',
                        ctx=Load()),
                      attr='chars',
                      ctx=Load())],
                    keywords=[])],
                ctx=Load())],
              keywords=[])),
          For(
            target=Tuple(
              elts=[
                Name(
                  id='i',
                  ctx=Store()),
                Name(
                  id='c',
                  ctx=Store())],
              ctx=Store()),
            iter=Call(
              func=Name(
                id='enumerate',
                ctx=Load()),
              args=[Name(
                id='C',
                ctx=Load())],
              keywords=[]),
            body=[Assign(
              targets=[Subscript(
                value=Name(
                  id='x',
                  ctx=Load()),
                slice=Index(value=Tuple(
                  elts=[
                    Name(
                      id='i',
                      ctx=Load()),
                    Subscript(
                      value=Attribute(
                        value=Name(
                          id='self',
                          ctx=Load()),
                        attr='char_indices',
                        ctx=Load()),
                      slice=Index(value=Name(
                        id='c',
                        ctx=Load())),
                      ctx=Load())],
                  ctx=Load())),
                ctx=Store())],
              value=Num(n=1))],
            orelse=[]),
          Return(value=Name(
            id='x',
            ctx=Load()))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='decode',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='x',
              annotation=None),
            arg(
              arg='calc_argmax',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[NameConstant(value=True)]),
        body=[
          If(
            test=Name(
              id='calc_argmax',
              ctx=Load()),
            body=[Assign(
              targets=[Name(
                id='x',
                ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(
                    id='x',
                    ctx=Load()),
                  attr='argmax',
                  ctx=Load()),
                args=[],
                keywords=[keyword(
                  arg='axis',
                  value=UnaryOp(
                    op=USub(),
                    operand=Num(n=1)))]))],
            orelse=[]),
          Return(value=Call(
            func=Attribute(
              value=Str(s=''),
              attr='join',
              ctx=Load()),
            args=[GeneratorExp(
              elt=Subscript(
                value=Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='indices_char',
                  ctx=Load()),
                slice=Index(value=Name(
                  id='x',
                  ctx=Load())),
                ctx=Load()),
              generators=[comprehension(
                target=Name(
                  id='x',
                  ctx=Store()),
                iter=Name(
                  id='x',
                  ctx=Load()),
                ifs=[],
                is_async=0)])],
            keywords=[]))],
        decorator_list=[],
        returns=None)],
    decorator_list=[]),
  ClassDef(
    name='colors',
    bases=[],
    keywords=[],
    body=[
      Assign(
        targets=[Name(
          id='ok',
          ctx=Store())],
        value=Str(s='\x1b[92m')),
      Assign(
        targets=[Name(
          id='fail',
          ctx=Store())],
        value=Str(s='\x1b[91m')),
      Assign(
        targets=[Name(
          id='close',
          ctx=Store())],
        value=Str(s='\x1b[0m'))],
    decorator_list=[]),
  Assign(
    targets=[Name(
      id='TRAINING_SIZE',
      ctx=Store())],
    value=Num(n=50000)),
  Assign(
    targets=[Name(
      id='DIGITS',
      ctx=Store())],
    value=Num(n=3)),
  Assign(
    targets=[Name(
      id='REVERSE',
      ctx=Store())],
    value=NameConstant(value=True)),
  Assign(
    targets=[Name(
      id='MAXLEN',
      ctx=Store())],
    value=BinOp(
      left=BinOp(
        left=Name(
          id='DIGITS',
          ctx=Load()),
        op=Add(),
        right=Num(n=1)),
      op=Add(),
      right=Name(
        id='DIGITS',
        ctx=Load()))),
  Assign(
    targets=[Name(
      id='chars',
      ctx=Store())],
    value=Str(s='0123456789+ ')),
  Assign(
    targets=[Name(
      id='ctable',
      ctx=Store())],
    value=Call(
      func=Name(
        id='CharacterTable',
        ctx=Load()),
      args=[Name(
        id='chars',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='questions',
      ctx=Store())],
    value=List(
      elts=[],
      ctx=Load())),
  Assign(
    targets=[Name(
      id='expected',
      ctx=Store())],
    value=List(
      elts=[],
      ctx=Load())),
  Assign(
    targets=[Name(
      id='seen',
      ctx=Store())],
    value=Call(
      func=Name(
        id='set',
        ctx=Load()),
      args=[],
      keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Generating data...')],
    keywords=[])),
  While(
    test=Compare(
      left=Call(
        func=Name(
          id='len',
          ctx=Load()),
        args=[Name(
          id='questions',
          ctx=Load())],
        keywords=[]),
      ops=[Lt()],
      comparators=[Name(
        id='TRAINING_SIZE',
        ctx=Load())]),
    body=[
      Assign(
        targets=[Name(
          id='f',
          ctx=Store())],
        value=Lambda(
          args=arguments(
            args=[],
            vararg=None,
            kwonlyargs=[],
            kw_defaults=[],
            kwarg=None,
            defaults=[]),
          body=Call(
            func=Name(
              id='int',
              ctx=Load()),
            args=[Call(
              func=Attribute(
                value=Str(s=''),
                attr='join',
                ctx=Load()),
              args=[GeneratorExp(
                elt=Call(
                  func=Attribute(
                    value=Attribute(
                      value=Name(
                        id='np',
                        ctx=Load()),
                      attr='random',
                      ctx=Load()),
                    attr='choice',
                    ctx=Load()),
                  args=[Call(
                    func=Name(
                      id='list',
                      ctx=Load()),
                    args=[Str(s='0123456789')],
                    keywords=[])],
                  keywords=[]),
                generators=[comprehension(
                  target=Name(
                    id='i',
                    ctx=Store()),
                  iter=Call(
                    func=Name(
                      id='range',
                      ctx=Load()),
                    args=[Call(
                      func=Attribute(
                        value=Attribute(
                          value=Name(
                            id='np',
                            ctx=Load()),
                          attr='random',
                          ctx=Load()),
                        attr='randint',
                        ctx=Load()),
                      args=[
                        Num(n=1),
                        BinOp(
                          left=Name(
                            id='DIGITS',
                            ctx=Load()),
                          op=Add(),
                          right=Num(n=1))],
                      keywords=[])],
                    keywords=[]),
                  ifs=[],
                  is_async=0)])],
              keywords=[])],
            keywords=[]))),
      Assign(
        targets=[Tuple(
          elts=[
            Name(
              id='a',
              ctx=Store()),
            Name(
              id='b',
              ctx=Store())],
          ctx=Store())],
        value=Tuple(
          elts=[
            Call(
              func=Name(
                id='f',
                ctx=Load()),
              args=[],
              keywords=[]),
            Call(
              func=Name(
                id='f',
                ctx=Load()),
              args=[],
              keywords=[])],
          ctx=Load())),
      Assign(
        targets=[Name(
          id='key',
          ctx=Store())],
        value=Call(
          func=Name(
            id='tuple',
            ctx=Load()),
          args=[Call(
            func=Name(
              id='sorted',
              ctx=Load()),
            args=[Tuple(
              elts=[
                Name(
                  id='a',
                  ctx=Load()),
                Name(
                  id='b',
                  ctx=Load())],
              ctx=Load())],
            keywords=[])],
          keywords=[])),
      If(
        test=Compare(
          left=Name(
            id='key',
            ctx=Load()),
          ops=[In()],
          comparators=[Name(
            id='seen',
            ctx=Load())]),
        body=[Continue()],
        orelse=[]),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='seen',
            ctx=Load()),
          attr='add',
          ctx=Load()),
        args=[Name(
          id='key',
          ctx=Load())],
        keywords=[])),
      Assign(
        targets=[Name(
          id='q',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Str(s='{}+{}'),
            attr='format',
            ctx=Load()),
          args=[
            Name(
              id='a',
              ctx=Load()),
            Name(
              id='b',
              ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='query',
          ctx=Store())],
        value=BinOp(
          left=Name(
            id='q',
            ctx=Load()),
          op=Add(),
          right=BinOp(
            left=Str(s=' '),
            op=Mult(),
            right=BinOp(
              left=Name(
                id='MAXLEN',
                ctx=Load()),
              op=Sub(),
              right=Call(
                func=Name(
                  id='len',
                  ctx=Load()),
                args=[Name(
                  id='q',
                  ctx=Load())],
                keywords=[]))))),
      Assign(
        targets=[Name(
          id='ans',
          ctx=Store())],
        value=Call(
          func=Name(
            id='str',
            ctx=Load()),
          args=[BinOp(
            left=Name(
              id='a',
              ctx=Load()),
            op=Add(),
            right=Name(
              id='b',
              ctx=Load()))],
          keywords=[])),
      AugAssign(
        target=Name(
          id='ans',
          ctx=Store()),
        op=Add(),
        value=BinOp(
          left=Str(s=' '),
          op=Mult(),
          right=BinOp(
            left=BinOp(
              left=Name(
                id='DIGITS',
                ctx=Load()),
              op=Add(),
              right=Num(n=1)),
            op=Sub(),
            right=Call(
              func=Name(
                id='len',
                ctx=Load()),
              args=[Name(
                id='ans',
                ctx=Load())],
              keywords=[])))),
      If(
        test=Name(
          id='REVERSE',
          ctx=Load()),
        body=[Assign(
          targets=[Name(
            id='query',
            ctx=Store())],
          value=Subscript(
            value=Name(
              id='query',
              ctx=Load()),
            slice=Slice(
              lower=None,
              upper=None,
              step=UnaryOp(
                op=USub(),
                operand=Num(n=1))),
            ctx=Load()))],
        orelse=[]),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='questions',
            ctx=Load()),
          attr='append',
          ctx=Load()),
        args=[Name(
          id='query',
          ctx=Load())],
        keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='expected',
            ctx=Load()),
          attr='append',
          ctx=Load()),
        args=[Name(
          id='ans',
          ctx=Load())],
        keywords=[]))],
    orelse=[]),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Total addition questions:'),
      Call(
        func=Name(
          id='len',
          ctx=Load()),
        args=[Name(
          id='questions',
          ctx=Load())],
        keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Vectorization...')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='x',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='np',
          ctx=Load()),
        attr='zeros',
        ctx=Load()),
      args=[Tuple(
        elts=[
          Call(
            func=Name(
              id='len',
              ctx=Load()),
            args=[Name(
              id='questions',
              ctx=Load())],
            keywords=[]),
          Name(
            id='MAXLEN',
            ctx=Load()),
          Call(
            func=Name(
              id='len',
              ctx=Load()),
            args=[Name(
              id='chars',
              ctx=Load())],
            keywords=[])],
        ctx=Load())],
      keywords=[keyword(
        arg='dtype',
        value=Attribute(
          value=Name(
            id='np',
            ctx=Load()),
          attr='bool',
          ctx=Load()))])),
  Assign(
    targets=[Name(
      id='y',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='np',
          ctx=Load()),
        attr='zeros',
        ctx=Load()),
      args=[Tuple(
        elts=[
          Call(
            func=Name(
              id='len',
              ctx=Load()),
            args=[Name(
              id='questions',
              ctx=Load())],
            keywords=[]),
          BinOp(
            left=Name(
              id='DIGITS',
              ctx=Load()),
            op=Add(),
            right=Num(n=1)),
          Call(
            func=Name(
              id='len',
              ctx=Load()),
            args=[Name(
              id='chars',
              ctx=Load())],
            keywords=[])],
        ctx=Load())],
      keywords=[keyword(
        arg='dtype',
        value=Attribute(
          value=Name(
            id='np',
            ctx=Load()),
          attr='bool',
          ctx=Load()))])),
  For(
    target=Tuple(
      elts=[
        Name(
          id='i',
          ctx=Store()),
        Name(
          id='sentence',
          ctx=Store())],
      ctx=Store()),
    iter=Call(
      func=Name(
        id='enumerate',
        ctx=Load()),
      args=[Name(
        id='questions',
        ctx=Load())],
      keywords=[]),
    body=[Assign(
      targets=[Subscript(
        value=Name(
          id='x',
          ctx=Load()),
        slice=Index(value=Name(
          id='i',
          ctx=Load())),
        ctx=Store())],
      value=Call(
        func=Attribute(
          value=Name(
            id='ctable',
            ctx=Load()),
          attr='encode',
          ctx=Load()),
        args=[
          Name(
            id='sentence',
            ctx=Load()),
          Name(
            id='MAXLEN',
            ctx=Load())],
        keywords=[]))],
    orelse=[]),
  For(
    target=Tuple(
      elts=[
        Name(
          id='i',
          ctx=Store()),
        Name(
          id='sentence',
          ctx=Store())],
      ctx=Store()),
    iter=Call(
      func=Name(
        id='enumerate',
        ctx=Load()),
      args=[Name(
        id='expected',
        ctx=Load())],
      keywords=[]),
    body=[Assign(
      targets=[Subscript(
        value=Name(
          id='y',
          ctx=Load()),
        slice=Index(value=Name(
          id='i',
          ctx=Load())),
        ctx=Store())],
      value=Call(
        func=Attribute(
          value=Name(
            id='ctable',
            ctx=Load()),
          attr='encode',
          ctx=Load()),
        args=[
          Name(
            id='sentence',
            ctx=Load()),
          BinOp(
            left=Name(
              id='DIGITS',
              ctx=Load()),
            op=Add(),
            right=Num(n=1))],
        keywords=[]))],
    orelse=[]),
  Assign(
    targets=[Name(
      id='indices',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='np',
          ctx=Load()),
        attr='arange',
        ctx=Load()),
      args=[Call(
        func=Name(
          id='len',
          ctx=Load()),
        args=[Name(
          id='y',
          ctx=Load())],
        keywords=[])],
      keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Attribute(
        value=Name(
          id='np',
          ctx=Load()),
        attr='random',
        ctx=Load()),
      attr='shuffle',
      ctx=Load()),
    args=[Name(
      id='indices',
      ctx=Load())],
    keywords=[])),
  Assign(
    targets=[Name(
      id='x',
      ctx=Store())],
    value=Subscript(
      value=Name(
        id='x',
        ctx=Load()),
      slice=Index(value=Name(
        id='indices',
        ctx=Load())),
      ctx=Load())),
  Assign(
    targets=[Name(
      id='y',
      ctx=Store())],
    value=Subscript(
      value=Name(
        id='y',
        ctx=Load()),
      slice=Index(value=Name(
        id='indices',
        ctx=Load())),
      ctx=Load())),
  Assign(
    targets=[Name(
      id='split_at',
      ctx=Store())],
    value=BinOp(
      left=Call(
        func=Name(
          id='len',
          ctx=Load()),
        args=[Name(
          id='x',
          ctx=Load())],
        keywords=[]),
      op=Sub(),
      right=BinOp(
        left=Call(
          func=Name(
            id='len',
            ctx=Load()),
          args=[Name(
            id='x',
            ctx=Load())],
          keywords=[]),
        op=FloorDiv(),
        right=Num(n=10)))),
  Assign(
    targets=[Tuple(
      elts=[
        Name(
          id='x_train',
          ctx=Store()),
        Name(
          id='x_val',
          ctx=Store())],
      ctx=Store())],
    value=Tuple(
      elts=[
        Subscript(
          value=Name(
            id='x',
            ctx=Load()),
          slice=Slice(
            lower=None,
            upper=Name(
              id='split_at',
              ctx=Load()),
            step=None),
          ctx=Load()),
        Subscript(
          value=Name(
            id='x',
            ctx=Load()),
          slice=Slice(
            lower=Name(
              id='split_at',
              ctx=Load()),
            upper=None,
            step=None),
          ctx=Load())],
      ctx=Load())),
  Assign(
    targets=[Tuple(
      elts=[
        Name(
          id='y_train',
          ctx=Store()),
        Name(
          id='y_val',
          ctx=Store())],
      ctx=Store())],
    value=Tuple(
      elts=[
        Subscript(
          value=Name(
            id='y',
            ctx=Load()),
          slice=Slice(
            lower=None,
            upper=Name(
              id='split_at',
              ctx=Load()),
            step=None),
          ctx=Load()),
        Subscript(
          value=Name(
            id='y',
            ctx=Load()),
          slice=Slice(
            lower=Name(
              id='split_at',
              ctx=Load()),
            upper=None,
            step=None),
          ctx=Load())],
      ctx=Load())),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Training Data:')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Attribute(
      value=Name(
        id='x_train',
        ctx=Load()),
      attr='shape',
      ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Attribute(
      value=Name(
        id='y_train',
        ctx=Load()),
      attr='shape',
      ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Validation Data:')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Attribute(
      value=Name(
        id='x_val',
        ctx=Load()),
      attr='shape',
      ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Attribute(
      value=Name(
        id='y_val',
        ctx=Load()),
      attr='shape',
      ctx=Load())],
    keywords=[])),
  Assign(
    targets=[Name(
      id='RNN',
      ctx=Store())],
    value=Attribute(
      value=Name(
        id='layers',
        ctx=Load()),
      attr='LSTM',
      ctx=Load())),
  Assign(
    targets=[Name(
      id='HIDDEN_SIZE',
      ctx=Store())],
    value=Num(n=128)),
  Assign(
    targets=[Name(
      id='BATCH_SIZE',
      ctx=Store())],
    value=Num(n=128)),
  Assign(
    targets=[Name(
      id='LAYERS',
      ctx=Store())],
    value=Num(n=1)),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Build model...')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='model',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Sequential',
        ctx=Load()),
      args=[],
      keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='RNN',
        ctx=Load()),
      args=[Name(
        id='HIDDEN_SIZE',
        ctx=Load())],
      keywords=[keyword(
        arg='input_shape',
        value=Tuple(
          elts=[
            Name(
              id='MAXLEN',
              ctx=Load()),
            Call(
              func=Name(
                id='len',
                ctx=Load()),
              args=[Name(
                id='chars',
                ctx=Load())],
              keywords=[])],
          ctx=Load()))])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='layers',
          ctx=Load()),
        attr='RepeatVector',
        ctx=Load()),
      args=[BinOp(
        left=Name(
          id='DIGITS',
          ctx=Load()),
        op=Add(),
        right=Num(n=1))],
      keywords=[])],
    keywords=[])),
  For(
    target=Name(
      id='_',
      ctx=Store()),
    iter=Call(
      func=Name(
        id='range',
        ctx=Load()),
      args=[Name(
        id='LAYERS',
        ctx=Load())],
      keywords=[]),
    body=[Expr(value=Call(
      func=Attribute(
        value=Name(
          id='model',
          ctx=Load()),
        attr='add',
        ctx=Load()),
      args=[Call(
        func=Name(
          id='RNN',
          ctx=Load()),
        args=[Name(
          id='HIDDEN_SIZE',
          ctx=Load())],
        keywords=[keyword(
          arg='return_sequences',
          value=NameConstant(value=True))])],
      keywords=[]))],
    orelse=[]),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='layers',
          ctx=Load()),
        attr='TimeDistributed',
        ctx=Load()),
      args=[Call(
        func=Attribute(
          value=Name(
            id='layers',
            ctx=Load()),
          attr='Dense',
          ctx=Load()),
        args=[Call(
          func=Name(
            id='len',
            ctx=Load()),
          args=[Name(
            id='chars',
            ctx=Load())],
          keywords=[])],
        keywords=[keyword(
          arg='activation',
          value=Str(s='softmax'))])],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='compile',
      ctx=Load()),
    args=[],
    keywords=[
      keyword(
        arg='loss',
        value=Str(s='categorical_crossentropy')),
      keyword(
        arg='optimizer',
        value=Str(s='adam')),
      keyword(
        arg='metrics',
        value=List(
          elts=[Str(s='accuracy')],
          ctx=Load()))])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='summary',
      ctx=Load()),
    args=[],
    keywords=[])),
  For(
    target=Name(
      id='iteration',
      ctx=Store()),
    iter=Call(
      func=Name(
        id='range',
        ctx=Load()),
      args=[
        Num(n=1),
        Num(n=200)],
      keywords=[]),
    body=[
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[],
        keywords=[])),
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[BinOp(
          left=Str(s='-'),
          op=Mult(),
          right=Num(n=50))],
        keywords=[])),
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[
          Str(s='Iteration'),
          Name(
            id='iteration',
            ctx=Load())],
        keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='model',
            ctx=Load()),
          attr='fit',
          ctx=Load()),
        args=[
          Name(
            id='x_train',
            ctx=Load()),
          Name(
            id='y_train',
            ctx=Load())],
        keywords=[
          keyword(
            arg='batch_size',
            value=Name(
              id='BATCH_SIZE',
              ctx=Load())),
          keyword(
            arg='epochs',
            value=Num(n=1)),
          keyword(
            arg='validation_data',
            value=Tuple(
              elts=[
                Name(
                  id='x_val',
                  ctx=Load()),
                Name(
                  id='y_val',
                  ctx=Load())],
              ctx=Load()))])),
      For(
        target=Name(
          id='i',
          ctx=Store()),
        iter=Call(
          func=Name(
            id='range',
            ctx=Load()),
          args=[Num(n=10)],
          keywords=[]),
        body=[
          Assign(
            targets=[Name(
              id='ind',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Attribute(
                  value=Name(
                    id='np',
                    ctx=Load()),
                  attr='random',
                  ctx=Load()),
                attr='randint',
                ctx=Load()),
              args=[
                Num(n=0),
                Call(
                  func=Name(
                    id='len',
                    ctx=Load()),
                  args=[Name(
                    id='x_val',
                    ctx=Load())],
                  keywords=[])],
              keywords=[])),
          Assign(
            targets=[Tuple(
              elts=[
                Name(
                  id='rowx',
                  ctx=Store()),
                Name(
                  id='rowy',
                  ctx=Store())],
              ctx=Store())],
            value=Tuple(
              elts=[
                Subscript(
                  value=Name(
                    id='x_val',
                    ctx=Load()),
                  slice=Index(value=Call(
                    func=Attribute(
                      value=Name(
                        id='np',
                        ctx=Load()),
                      attr='array',
                      ctx=Load()),
                    args=[List(
                      elts=[Name(
                        id='ind',
                        ctx=Load())],
                      ctx=Load())],
                    keywords=[])),
                  ctx=Load()),
                Subscript(
                  value=Name(
                    id='y_val',
                    ctx=Load()),
                  slice=Index(value=Call(
                    func=Attribute(
                      value=Name(
                        id='np',
                        ctx=Load()),
                      attr='array',
                      ctx=Load()),
                    args=[List(
                      elts=[Name(
                        id='ind',
                        ctx=Load())],
                      ctx=Load())],
                    keywords=[])),
                  ctx=Load())],
              ctx=Load())),
          Assign(
            targets=[Name(
              id='preds',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='model',
                  ctx=Load()),
                attr='predict_classes',
                ctx=Load()),
              args=[Name(
                id='rowx',
                ctx=Load())],
              keywords=[keyword(
                arg='verbose',
                value=Num(n=0))])),
          Assign(
            targets=[Name(
              id='q',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='ctable',
                  ctx=Load()),
                attr='decode',
                ctx=Load()),
              args=[Subscript(
                value=Name(
                  id='rowx',
                  ctx=Load()),
                slice=Index(value=Num(n=0)),
                ctx=Load())],
              keywords=[])),
          Assign(
            targets=[Name(
              id='correct',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='ctable',
                  ctx=Load()),
                attr='decode',
                ctx=Load()),
              args=[Subscript(
                value=Name(
                  id='rowy',
                  ctx=Load()),
                slice=Index(value=Num(n=0)),
                ctx=Load())],
              keywords=[])),
          Assign(
            targets=[Name(
              id='guess',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='ctable',
                  ctx=Load()),
                attr='decode',
                ctx=Load()),
              args=[Subscript(
                value=Name(
                  id='preds',
                  ctx=Load()),
                slice=Index(value=Num(n=0)),
                ctx=Load())],
              keywords=[keyword(
                arg='calc_argmax',
                value=NameConstant(value=False))])),
          Expr(value=Call(
            func=Name(
              id='print',
              ctx=Load()),
            args=[
              Str(s='Q'),
              IfExp(
                test=Name(
                  id='REVERSE',
                  ctx=Load()),
                body=Subscript(
                  value=Name(
                    id='q',
                    ctx=Load()),
                  slice=Slice(
                    lower=None,
                    upper=None,
                    step=UnaryOp(
                      op=USub(),
                      operand=Num(n=1))),
                  ctx=Load()),
                orelse=Name(
                  id='q',
                  ctx=Load()))],
            keywords=[keyword(
              arg='end',
              value=Str(s=' '))])),
          Expr(value=Call(
            func=Name(
              id='print',
              ctx=Load()),
            args=[
              Str(s='T'),
              Name(
                id='correct',
                ctx=Load())],
            keywords=[keyword(
              arg='end',
              value=Str(s=' '))])),
          If(
            test=Compare(
              left=Name(
                id='correct',
                ctx=Load()),
              ops=[Eq()],
              comparators=[Name(
                id='guess',
                ctx=Load())]),
            body=[Expr(value=Call(
              func=Name(
                id='print',
                ctx=Load()),
              args=[BinOp(
                left=BinOp(
                  left=Attribute(
                    value=Name(
                      id='colors',
                      ctx=Load()),
                    attr='ok',
                    ctx=Load()),
                  op=Add(),
                  right=Str(s='☑')),
                op=Add(),
                right=Attribute(
                  value=Name(
                    id='colors',
                    ctx=Load()),
                  attr='close',
                  ctx=Load()))],
              keywords=[keyword(
                arg='end',
                value=Str(s=' '))]))],
            orelse=[Expr(value=Call(
              func=Name(
                id='print',
                ctx=Load()),
              args=[BinOp(
                left=BinOp(
                  left=Attribute(
                    value=Name(
                      id='colors',
                      ctx=Load()),
                    attr='fail',
                    ctx=Load()),
                  op=Add(),
                  right=Str(s='☒')),
                op=Add(),
                right=Attribute(
                  value=Name(
                    id='colors',
                    ctx=Load()),
                  attr='close',
                  ctx=Load()))],
              keywords=[keyword(
                arg='end',
                value=Str(s=' '))]))]),
          Expr(value=Call(
            func=Name(
              id='print',
              ctx=Load()),
            args=[Name(
              id='guess',
              ctx=Load())],
            keywords=[]))],
        orelse=[])],
    orelse=[])])